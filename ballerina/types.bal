// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

public type SavingsAccountBodyPayment record {
    # If Bill is to be produced ahead of the due date, then the number of lead days is specified here. Accepted format is ND, where N is the number of days
    @constraint:String {maxLength: 3}
    string billLeadDays?;
    # The type of payment obligation generated
    @constraint:String {maxLength: 15}
    string billType?;
    # Defines the number of days prior to the actual payment, when a bill needs to be finalised. This allows the user or customer to make amendments to an issued bill through the Payment Holiday activity with as many number of times, between the issue date and finalisation date. When zero days is defined, then user or customer will be allowed to make amendments to an issued bill through Payment Holiday activity until the payment date
    @constraint:String {maxLength: 4}
    string finaliseBill?;
    # Indicates the initiation of payment for an account
    SavingsAccountBodyPayments[] payments?;
    # Id of the product property
    SavingsAccountBodyProperty[] property?;
    # Method chosen to make the payment
    @constraint:String {maxLength: 10}
    string paymentMethod?;
    # Period that defines how long the scheduled payment should be deferred from original cycled date. If defined, then on the cycled date, system will schedule deferring makedue or deferring capitalise activities moving the bills to defer status. On actual cycled date plus Defer Period, system will schedule make due or capitalise activities where bills will be moved out from defer status to their respective status
    @constraint:String {maxLength: 35}
    string deferPeriod?;
    # Flag to indicate whether we need to issue bill and make it due separately or together. If the field is set to NO, then both would be combined and performed as a single activity
    @constraint:String {maxLength: 3}
    string issueBill?;
    # The frequency at which a payment is required to be generated
    @constraint:String {maxLength: 38}
    string paymentFrequency?;
    # Indicates if the payment is Customer (C) type or Bank (B) type
    @constraint:String {maxLength: 30}
    string paymentType?;
    # Used to specify the progressive percentage with which the system calculated payment amount has to progress on every payment
    @constraint:String {maxLength: 12}
    string progPercentage?;
};

public type AccountfacilitiesResponse1Body AccountfacilitiesResponse1BodyInner[];

public type AccountProductBodyBalance record {
    # Indicates the extensions
    record {} extensions?;
    # Groups the products based on their type, eg, Checking, Savings, CD etc,
    AccountProductBodyAccountTypes[] accountTypes?;
    # Display name or short name of the account specified
    SavingsAccountBodyShortTitles[] accountNames?;
};

# AccountsArrangementsResponse
public type AccountsArrangementsResponse record {
    ArrangementHeader header?;
    AccountsArrangementsResponseBody body?;
};

# Represents the Queries record for the operation: updateAccountInterestCondition
public type UpdateAccountInterestConditionQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type AccountInterestConditionResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesCrinterest drinterest?;
    SavingsAccountResponseBodyPropertiesCrinterest crinterest?;
};

public type CorporateAccountBodyBalance record {
    # This indicates the  date  on which the offer or privilege terminates for the event
    string expiryDate?;
    # Identifies any restrictions for posting entries that are to be imposed on the Account
    @constraint:String {maxLength: 4}
    string postingRestriction?;
    # Indicates the extensions
    record {} extensions?;
    # Reason for unblocking the restriction set on an account
    @constraint:String {maxLength: 100}
    string unrestrictionText?;
    # Sets restrictions on the actions that can be performed on an account. Allowed values can be retrieved through method getEbLookup, virtualTableName BLOCK.REASON.CODES. 
    @constraint:String {maxLength: 35}
    string restrictionReason?;
    # Free text information to capture the reason for restriction applied on an account
    @constraint:String {maxLength: 100}
    string restrictionText?;
    # Contains the date on which the transaction or payment gets initiated
    string startDate?;
    # Captures the code that removes the restriction set on an account.  Allowed values can be retrieved through method getEbLookup, virtualTableName UNBLOCK.REASON.CODES
    @constraint:String {maxLength: 35}
    string unrestrictionReason?;
};

public type PayoffSavingsAccountsBodyProperties record {
    # Input is the valid field name for the metrics evaluation of alerts
    PayoffSavingsAccountsBodyFields[] fields?;
    # The identifier of the product condition
    @constraint:String {maxLength: 30}
    string propertyId?;
};

public type SavingsAccountBodyPropertyClass record {
    # Contains the different payout options, for example charge, interest or principal on which the payout settlement instructions would be processed
    @constraint:String {maxLength: 30}
    string payOutPropertyClass?;
};

# Represents the Headers record for the operation: updateAccountSettlement
public type UpdateAccountSettlementHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Headers record for the operation: updateAccountChannel
public type UpdateAccountChannelHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountPayoffAutoSimulationBodyPayoff record {
    # This is the payment amount
    AccountPayoffAutoSimulationBodyAmount[] amount?;
    # Indicates the extensions
    record {} extensions?;
    # Percentage of holdings that can be pledged as collateral
    @constraint:String {maxLength: 12}
    string percentage?;
    # Refers to view or cancel options
    @constraint:String {maxLength: 9}
    string action?;
    # Contains the period within which the locked rate needs to be availed
    @constraint:String {maxLength: 3}
    string expiryDays?;
    # Specifies if the amounts made due to the customer between the simulation start date and payoff effective date, should be considered settled or not. By setting this field to YES, auto settlement of future dues would be enabled and setting it to null or NO will not settle the due amounts automatically
    @constraint:String {maxLength: 3}
    string settleDues?;
};

# Represents the Queries record for the operation: createCorporateAccount
public type CreateCorporateAccountQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Queries record for the operation: createMinorAccount
public type CreateMinorAccountQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Queries record for the operation: updateAccountBillMigration
public type UpdateAccountBillMigrationQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type SavingsAccountBodyPrintAttributes record {
    # It denotes the associated value against the attribute name to make decisions during statement processing or to pass on the value to down-stream systems
    @constraint:String {maxLength: 50}
    string printAttributeValues?;
    # It denotes the values that can be either used to make decisions during statement processing or to pass on the value to down-stream systems
    @constraint:String {maxLength: 50}
    string printAttributeNames?;
};

public type AccountDormancyReactivationResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

public type SavingsAccountBodyPayments record {
    # Specifies the number of coupon or interest payments a year
    @constraint:String {maxLength: 3}
    string numberOfPayments?;
    # Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned
    @constraint:String {maxLength: 30}
    string endDate?;
    # Percentage of holdings that can be pledged as collateral
    @constraint:String {maxLength: 12}
    string percentage?;
    # Indicates the base day which will be used to cycle the Payment date
    @constraint:String {maxLength: 2}
    string baseDay?;
    # One time payment amount made as part of the repayment activity. For scheduled payments  it indicates the actual amount paid instead of the scheduledPaymentAmount
    @constraint:String {maxLength: 18}
    string adhocPaymentAmount?;
    # System calculated Payment amount
    @constraint:String {maxLength: 18}
    string calculatedPaymentAmount?;
    # Contains the date on which the transaction or payment gets initiated
    @constraint:String {maxLength: 30}
    string startDate?;
};

public type PayoffSavingsAccountsResponse1BodyProperties record {
    PayoffSavingsAccountsResponse1BodyPropertiesSettlement settlement?;
};

# Represents the Queries record for the operation: updateAccountBalanceMigration
public type UpdateAccountBalanceMigrationQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type AccountResponseBodyProperties record {
    AccountResponseBodyPropertiesBalance balance?;
};

public type AccountStatementResponseBodyInner_narratives record {
    # The additional text printed on descriptive statements in addition to the standard narrative and/or reference
    @constraint:String {maxLength: 150}
    string narrative?;
};

# Represents the Queries record for the operation: updateAccountSettlement
public type UpdateAccountSettlementQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Headers record for the operation: updateAccountSchedule
public type UpdateAccountScheduleHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountfacilitiesResponse1BodyInner_facility record {
    # Unique id of the service
    @constraint:String {maxLength: 15}
    string 'service?;
    # It will indicate whether the corresponding service is available for arrangement account
    @constraint:String {maxLength: 10}
    string serviceAvailability?;
    # It will indicate whether user has opted the service or not.
    @constraint:String {maxLength: 7}
    string customerOption?;
};

public type AccountSimulationResponseBody record {
    PayoffSavingsAccountsResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountSimulationResponseBodyProperties properties?;
};

# Represents the Queries record for the operation: getAccountStatement
public type GetAccountStatementQueries record {
    # Indicates the business date from when the balance reservation event is active
    string fromDate?;
    # Indicates spread of time buckets.Ex: 3M,6M,9M,10Y etc
    string period?;
    # Contains the identifier for the transaction in the core system
    string transactionReference?;
    # Indicates the business date until when the balance reservation event is active
    string toDate?;
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

# AccountLimitResponse
public type AccountLimitResponse record {
    ArrangementHeader header?;
    AccountLimitResponseBody body?;
};

public type AccountBalanceMigrationBodyBalanceMaintenance record {
    # Indicates the extensions
    record {} extensions?;
    # Denotes the description for the adjustment
    @constraint:String {maxLength: 35}
    string adjustmentDisplayname?;
    # Represents the account number to be used while adjusting balance amounts
    @constraint:String {maxLength: 16}
    string adjustmentDifferenceAccount?;
    # List bills of all type
    AccountBalanceMigrationBodyBills[] bills?;
    # The net adjustment for non-contingent balance types would be calculated and stored in this field by the system during Balance Adjustment, Write off activities of Balance maintenance
    @constraint:String {maxLength: 19}
    string netAdjustmentAmount?;
    # Indicates the interest or account or charge properties for which balances are to be captured or adjusted
    AccountBalanceMigrationBodyAdjustProperties[] adjustProperties?;
};

# Represents the Queries record for the operation: updateAccountDormancyStatus
public type UpdateAccountDormancyStatusQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type PayoffSavingsAccountsResponseBodyProperties record {
    PayoffSavingsAccountsResponseBodyPropertiesPayoff payoff?;
    PayoffSavingsAccountsResponseBodyPropertiesSettlement settlement?;
};

public type AccountSettlementResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesSettlement settlement?;
};

# Represents the Headers record for the operation: updateAccountLimit
public type UpdateAccountLimitHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type PastStatementsResponseBody PastStatementsResponseBodyInner[];

public type PayoffSavingsAccountsBodyPayoff record {
    # Refers to view or cancel options
    @jsondata:Name {value: "Action"}
    string action?;
    # Indicates the extensions
    record {} extensions?;
    # Percentage of holdings that can be pledged as collateral
    @jsondata:Name {value: "Percentage"}
    string percentage?;
    # Contains the period within which the locked rate needs to be availed
    @constraint:String {maxLength: 3}
    string expiryDays?;
    # Indicates the monetary amount that is fixed during the associated account's effective period
    @constraint:String {maxLength: 19}
    string fixedAmount?;
    # Specifies if the amounts made due to the customer between the simulation start date and payoff effective date, should be considered settled or not. By setting this field to YES, auto settlement of future dues would be enabled and setting it to null or NO will not settle the due amounts automatically
    @constraint:String {maxLength: 3}
    string settleDues?;
};

public type AccountProductResponseBodyPropertiesBalance record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    AccountProductBodyBalance body?;
};

# Represents the Queries record for the operation: updateAccountLob
public type UpdateAccountLobQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type SavingsAccountResponseBodyPropertiesLimitHeader record {
    # The status of the transaction
    string transactionStatus?;
    SavingsAccountResponseBodyPropertiesLimitHeaderAudit audit?;
    # The Identifier of the record created
    string id?;
    # The status of the record
    string status?;
};

public type PayoffSavingsAccountsBodySettlement record {
    # Indicates the beneficiary the payment should be made to in default
    "Default Beneficiary" defaultBeneficiary?;
    # Contains the direct debit mandate reference (dd) when the settlement method is set to direct debit. The dd reference is typically the account number followed by a suffix, for example 15245.1
    "DD Mandate Ref" ddMandateRef11?;
    # Indicates if the payment is Customer (C) type or Bank (B) type
    "Payment Type" paymentType11?;
    # Flag to indicate whether Payout Settlement instruction is required or not.Valid input is Yes or No.Default value is Yes
    "Payout Settlement" payoutSettlement1?;
    # Contains the transaction type used by the transaction recycler for retrying the debits
    "Payin RC Type" payinRcType1?;
    # Contains the transaction recycling rules which define the set of retry conditions
    "Payin RC Condition" payinRcCondition1?;
    # Contains the account from which funds are to be debited against the payment type
    "Payin Account" payinAccount11?;
    # Contains the percentage of the payment amount used for settlement of the bills due
    "Payin Percentage" payinPercentage11?;
    # Contains the account to which a settlement amount is transferred
    "Payout" payoutAcctSettle?;
    # The account to which a settlement amount is transferred
    "Payout Account" payoutAccount11?;
    # Contains the beneficiary Id used for settlement of the bills due
    "Payin Beneficiary" payinBeneficiary11?;
    # Contains the transaction type used to debit the customer account for settlement of the bills due
    "Payin Activity" payinActivity11?;
    # Default settlement account to be used for all incoming payments and outgoing settlements when a specific settlement account is not provided for each payment type
    "Default Settlement Account" defaultSettlementAccount?;
    # Contains the rule on which the system should utilise the funds available in the pay in account during the settlement process. Options are Full, Partial and None
    "Payin Account Debit Rule" payinAcDbRule1?;
    # Contains the finite amount of the payment used for settlement of the payables
    "Payout Amount" payoutAmount11?;
    # The beneficiary that payment should be made to
    "Payout Beneficiary" payoutBeneficiary11?;
    # Contains the finite amount of the payment used for settlement of the bills due
    "Payin Amount" payinAmount11?;
    # Contains the transaction type used to credit the customer account for settlement of the payables
    "Payout Activity" payoutActivity11?;
    # Indicates the Transaction Cycler condition to be used for the payout property to allow variation of different retry conditions
    "Payout RC Condition" payoutRcCondition1?;
    # Contains the percentage of the payment amount used for settlement of the payable
    "Payout Percentage" payoutPercentage11?;
    # Contains the account from which funds are to be debited against the payment type
    "Payin" payinAcctSettle?;
    # Contains the payment order product id for which the payment is initiated
    "Payin Product" payinPoProduct11?;
    # If this field is set to YES, then whenever user changes the Payin settlement accounts then the modified accounts should affect the pending funding requests raised for the current overdue Bills. If this field is set to NO or blank then the changes to the payin settlement accounts apply to the next due bills
    @constraint:String {maxLength: 3}
    string updatePendingRetry?;
    # Indicates the Transaction Cycler type  reference to be used during handoff to inform the recycler what type of transaction is being handed-off
    "Payout RC Type" payoutRcType1?;
    # Specifies the account at which the interest or payment settlement is to be made
    "Account Settlement" accountSettlement?;
    # Indicates the activity used for payout when payout of funds need to happen automatically
    "Payout Settle Activity" payoutSettleActivity1?;
    # Contains the payout payment order product for which payment is initiated
    "Payout Product" payoutPoProduct11?;
    # Indicates the activity to be used to settle the dues of the current contract
    "Payin Settle Activity" payinSettleActivity1?;
    # Contains the payout payment order product for which payment is initiated
    "Payout Property" payoutProperty11?;
    # Indicates the extensions
    record {} extensions?;
    # Flag to indicate whether Payin Settlement instruction is required or not. Valid input is Yes or No. Default value is Yes
    "Payin Settlement" payinSettlement1?;
    # Contains the different payout options, for example charge, interest or principal on which the payout settlement instructions would be processed
    "Property Class" payoutPptyClass11?;
    # Indicates the user exception routine
    "Payout Account Credit Rule" payoutAcCrRule1?;
};

public type AccountSimulationBodyPostingRestrictions record {
    # This indicates the  date  on which the offer or privilege terminates for the event
    @constraint:String {maxLength: 11}
    string expiryDate?;
    # Identifies any restrictions for posting entries that are to be imposed on the Account
    @constraint:String {maxLength: 4}
    string postingRestriction?;
    # Reason for unblocking the restriction set on an account
    @constraint:String {maxLength: 100}
    string unrestrictionText?;
    # Sets restrictions on the actions that can be performed on an account. Allowed values can be retrieved through method getEbLookup, virtualTableName BLOCK.REASON.CODES. 
    @constraint:String {maxLength: 35}
    string restrictionReason?;
    # Free text information to capture the reason for restriction applied on an account
    @constraint:String {maxLength: 100}
    string restrictionText?;
    # Contains the date on which the transaction or payment gets initiated
    @constraint:String {maxLength: 11}
    string startDate?;
    # Captures the code that removes the restriction set on an account.  Allowed values can be retrieved through method getEbLookup, virtualTableName UNBLOCK.REASON.CODES
    @constraint:String {maxLength: 35}
    string unrestrictionReason?;
};

# AccountPayoffAutoSimulationResponse
public type AccountPayoffAutoSimulationResponse record {
    ArrangementHeader header?;
    AccountPayoffAutoSimulationResponseBody body?;
};

public type PastStatementsResponseBodyInner record {
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    @constraint:String {maxLength: 35}
    string accountId?;
    # Indicates the extension data
    record {} extensions?;
    # Indicates the participant account used for producing combined statement. When participant account is defined, this frequency number for the participant account is synchronised with the lead account and individual statement generation would be automatically suppressed
    @constraint:String {maxLength: 30}
    string participantAccount?;
    # Indicates the business date until when the balance reservation event is active
    @constraint:String {maxLength: 30}
    string toDate?;
    # Contains the reference of the accounting entry
    @constraint:String {maxLength: 35}
    string statementId?;
    # Indicates the type of account which is printed in the account statement whether it is lead or participant account
    @constraint:String {maxLength: 30}
    string leadOrParticipant?;
    # Specifies the frequency in which the payment application(periodic payments) execute the payment instruction
    @constraint:String {maxLength: 30}
    string frequency?;
    # Contains the value which is passed on to statement inorder to differentiate between summary or detailed type of statement
    @constraint:String {maxLength: 30}
    string detailedStatement?;
};

# Represents the Headers record for the operation: updateAccountBalanceMigration
public type UpdateAccountBalanceMigrationHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Queries record for the operation: updateAccountConditions
public type UpdateAccountConditionsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Queries record for the operation: createSavingAccount
public type CreateSavingAccountQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type BusinessAccountResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance noticefee?;
    SavingsAccountResponseBodyPropertiesInheritance servicefee?;
    SavingsAccountResponseBodyPropertiesInheritance periodiccharges?;
    SavingsAccountResponseBodyPropertiesInheritance bonus?;
    SavingsAccountResponseBodyPropertiesInheritance crinterest?;
    SavingsAccountResponseBodyPropertiesInheritance xisa?;
    SavingsAccountResponseBodyPropertiesInheritance inheritance?;
    SavingsAccountResponseBodyPropertiesInheritance xisPoolid?;
    SavingsAccountResponseBodyPropertiesInheritance wirefee?;
    SavingsAccountResponseBodyPropertiesInheritance bulkdebitfee?;
    SavingsAccountResponseBodyPropertiesInheritance settlement?;
    SavingsAccountResponseBodyPropertiesInheritance drinterest?;
    BusinessAccountResponseBodyPropertiesBalance balance?;
    SavingsAccountResponseBodyPropertiesInheritance activityCharges?;
    SavingsAccountResponseBodyPropertiesInheritance dormancy?;
    SavingsAccountResponseBodyPropertiesInheritance xira?;
    SavingsAccountResponseBodyPropertiesInheritance 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance statement?;
    SavingsAccountResponseBodyPropertiesInheritance dormancyfee?;
    SavingsAccountResponseBodyPropertiesInheritance agentCommission?;
    SavingsAccountResponseBodyPropertiesInheritance minbalfee?;
    SavingsAccountResponseBodyPropertiesInheritance txnfee?;
    SavingsAccountResponseBodyPropertiesInheritance reporting?;
    SavingsAccountResponseBodyPropertiesInheritance officers?;
    SavingsAccountResponseBodyPropertiesInheritance balanceAvailability?;
    SavingsAccountResponseBodyPropertiesInheritance bulkcreditfee?;
    SavingsAccountResponseBodyPropertiesInheritance withdrawalfee?;
    SavingsAccountResponseBodyPropertiesInheritance xrateSetup?;
    SavingsAccountResponseBodyPropertiesInheritance renewal?;
    SavingsAccountResponseBodyPropertiesInheritance cashdepfee?;
    SavingsAccountResponseBodyPropertiesInheritance payoff?;
    SavingsAccountResponseBodyPropertiesInheritance tax?;
    SavingsAccountResponseBodyPropertiesInheritance messaging?;
    SavingsAccountResponseBodyPropertiesInheritance alerts?;
    SavingsAccountResponseBodyPropertiesInheritance schedule?;
    SavingsAccountResponseBodyPropertiesInheritance prefpricing?;
    SavingsAccountResponseBodyPropertiesInheritance chqpayinfee?;
    SavingsAccountResponseBodyPropertiesInheritance xtxlimit?;
    SavingsAccountResponseBodyPropertiesInheritance constraint?;
    SavingsAccountResponseBodyPropertiesInheritance facility?;
    SavingsAccountResponseBodyPropertiesCustomer customer?;
};

# Represents the Headers record for the operation: updateAccountAdjustment
public type UpdateAccountAdjustmentHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountResponseBodyPropertiesSettlement record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    SavingsAccountBodySettlement body?;
};

# Represents the Headers record for the operation: getAccountStatement
public type GetAccountStatementHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountLobResponseBodyArrangementActivity record {
    # Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant
    @constraint:String {maxLength: 4}
    string lineOfBusiness?;
    # Indicates the extensions
    record {} extensions?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    string effectiveDate?;
};

# AccountLobResponse
public type AccountLobResponse record {
    ArrangementHeader header?;
    AccountLobResponseBody body?;
};

public type CurrentAccountsResponseBodyArrangementActivity record {
    # Id of the activity, e.g. ACCOUNTS-CAPITALISE-ACCHARGE*CARDISSUEFEE
    @constraint:String {maxLength: 80}
    string activityId?;
    # Indicates the extensions
    record {} extensions?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account
    @constraint:String {maxLength: 30}
    string productId?;
    # Identifier of individuals in terms of Customers or Person or Entities with reference to the bank
    CurrentAccountsBodyParties[] parties?;
    # Identifier of the currency. This is the 3-letter ISO 4217 code of the currency
    @constraint:String {maxLength: 3}
    string currencyId?;
    # Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant
    @constraint:String {maxLength: 16}
    string branch?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    @constraint:String {maxLength: 11}
    string effectiveDate?;
};

# AccountInterestConditionResponse
public type AccountInterestConditionResponse record {
    ArrangementHeader header?;
    AccountInterestConditionResponseBody body?;
};

public type SavingsAccountBodyItems record {
    # Indicates actual restricted item for holiday. It holds the value based on the holiday restriction type
    @constraint:String {maxLength: 35}
    string holidayRestrictItem?;
};

# Represents the Queries record for the operation: updateAccountInterestConditions
public type UpdateAccountInterestConditionsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Headers record for the operation: updateAccountBillMigration
public type UpdateAccountBillMigrationHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountInterestConditionsResponseBodyArrangementActivity record {
    # Indicates the extensions
    record {} extensions?;
    # Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant
    @constraint:String {maxLength: 30}
    string channel?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    string effectiveDate?;
};

# Represents the Headers record for the operation: deleteCurrentAccounts
public type DeleteCurrentAccountsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Headers record for the operation: updatePayoffSavingsAccounts
public type UpdatePayoffSavingsAccountsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type CurrentAccountsResponse1Body record {
    PayoffSavingsAccountsResponse1BodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

public type AccountProductResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance noticefee?;
    SavingsAccountResponseBodyPropertiesInheritance periodiccharges?;
    SavingsAccountResponseBodyPropertiesInheritance bonus?;
    SavingsAccountResponseBodyPropertiesInheritance crinterest?;
    SavingsAccountResponseBodyPropertiesInheritance xisa?;
    SavingsAccountResponseBodyPropertiesInheritance arrangementRules?;
    SavingsAccountResponseBodyPropertiesInheritance inheritance?;
    SavingsAccountResponseBodyPropertiesInheritance xisPoolid?;
    SavingsAccountResponseBodyPropertiesInheritance pricingadjustment?;
    SavingsAccountResponseBodyPropertiesInheritance payfees?;
    SavingsAccountResponseBodyPropertiesInheritance settlement?;
    AccountProductResponseBodyPropertiesBalance balance?;
    SavingsAccountResponseBodyPropertiesInheritance activityCharges?;
    SavingsAccountResponseBodyPropertiesInheritance nsfreversalfees?;
    SavingsAccountResponseBodyPropertiesInheritance accreporting?;
    SavingsAccountResponseBodyPropertiesInheritance dormancy?;
    SavingsAccountResponseBodyPropertiesInheritance 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance xira?;
    SavingsAccountResponseBodyPropertiesInheritance statement?;
    SavingsAccountResponseBodyPropertiesInheritance rewardsPoints?;
    SavingsAccountResponseBodyPropertiesInheritance dormancyfee?;
    SavingsAccountResponseBodyPropertiesInheritance agentCommission?;
    SavingsAccountResponseBodyPropertiesInheritance closurefee?;
    SavingsAccountResponseBodyPropertiesInheritance minbalfee?;
    SavingsAccountResponseBodyPropertiesInheritance txnfee?;
    SavingsAccountResponseBodyPropertiesInheritance balanceMaintenance?;
    SavingsAccountResponseBodyPropertiesInheritance balanceAvailability?;
    SavingsAccountResponseBodyPropertiesInheritance officers?;
    SavingsAccountResponseBodyPropertiesInheritance returnfees?;
    SavingsAccountResponseBodyPropertiesInheritance forcecapitalise?;
    SavingsAccountResponseBodyPropertiesInheritance xrateSetup?;
    SavingsAccountResponseBodyPropertiesInheritance renewal?;
    SavingsAccountResponseBodyPropertiesInheritance mgmtfee?;
    SavingsAccountResponseBodyPropertiesInheritance productQualifierNotice?;
    SavingsAccountResponseBodyPropertiesInheritance limitfees?;
    SavingsAccountResponseBodyPropertiesInheritance tax?;
    SavingsAccountResponseBodyPropertiesInheritance messaging?;
    SavingsAccountResponseBodyPropertiesInheritance cashback?;
    SavingsAccountResponseBodyPropertiesInheritance alerts?;
    SavingsAccountResponseBodyPropertiesInheritance schedule?;
    SavingsAccountResponseBodyPropertiesInheritance prefpricing?;
    SavingsAccountResponseBodyPropertiesInheritance cardissuefee?;
    SavingsAccountResponseBodyPropertiesInheritance poNotice?;
    SavingsAccountResponseBodyPropertiesInheritance xtxlimit?;
    SavingsAccountResponseBodyPropertiesInheritance constraint?;
    SavingsAccountResponseBodyPropertiesInheritance facility?;
    SavingsAccountResponseBodyPropertiesInheritance customer?;
};

public type AccountPayoutResponseBody record {
    PayoffSavingsAccountsResponse1BodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

public type AccountfacilitiesResponseBodyPropertiesFacility record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    AccountfacilitiesBodyFacility body?;
};

public type AccountDormancyStatusResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

public type SavingsAccountResponseBodyPropertiesInheritanceHeader record {
    string transactionStatus?;
    string id?;
    string status?;
};

# Represents the Headers record for the operation: updateAccountInterestCondition
public type UpdateAccountInterestConditionHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyOtherOfficers record {
    # It specifies the role defined for each additional officer of the product or arrangement
    @constraint:String {maxLength: 30}
    string otherOfficerRole?;
    # Other officers managing the Customer
    @constraint:String {maxLength: 4}
    string otherOfficerId?;
    # It specifies the notes related to the other officer entered by a user
    @constraint:String {maxLength: 50}
    string otherOfficerNotes?;
};

public type AccountInfoResponseBodyInner record {
    # The identifier of the underlying Entity/Company/Branch
    @constraint:String {maxLength: 11}
    string companyCode?;
    # Indicates an unique identifier of an account
    @constraint:String {maxLength: 17}
    string arrangementId?;
    # Shows reserved amount for the underlying account for a given balance reservation event
    @constraint:Number {maxValue: 19}
    decimal lockedAmount?;
    # Balance taking into consideration all cleared funds booked against the account, including credit and reversed debit entries with a future exposure date
    decimal clearedBalance?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account
    @constraint:String {maxLength: 30}
    string productId?;
    # Contains the name used for display or enrichment purposes
    @constraint:String {maxLength: 30}
    string displayName?;
    # Short title on an account
    @constraint:String {maxLength: 35}
    string accountTitle?;
    # Contains the opening date of the account, used to check when the account was created
    @constraint:String {maxLength: 8}
    string accountOpeningDate?;
    # Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant
    @constraint:String {maxLength: 16}
    string branch?;
    # Available balance of the account which is the projected balance which includes the net movements of both debits and credits against the account
    string availableBalance?;
    # Contains the secondary limit amount to be used for the purpose of secondary limit check
    string secondaryLimitAmount?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    @constraint:String {maxLength: 35}
    string accountId?;
    # The portion of an allocated credit limit that is available for the nominated customer
    decimal availableLimit?;
    # Total funds available in the account after all the ongoing transactions have been completed
    decimal availableFunds?;
    # Indicates the extension data
    record {} extensions?;
    # Real-time balance including all authorised transactions posted against the account, excluding any entries with a future processing date
    decimal onlineActualBalance?;
    # Real-time balance including all authorised transactions posted against the account and, unless it is a nostro or internal account, unauthorised debit entries
    string workingBalance?;
    # Identifies the currency. E.g. USD, GBP etc
    @constraint:String {maxLength: 3}
    string currency?;
    # Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed
    AccountInfoResponseBodyInner_customers[] customers?;
    # Indicates the description of the Product
    @constraint:String {maxLength: 200}
    string productDescription?;
    # Specifies the status of the agreement with following options, UNAUTH - input but not authorised, AUTH - authorised and LIVE, CURRENT - disbursement initiated, EXPIRED - past final payment date with pending dues, REVERSED - reversed, CLOSE - closed, PENDING.CLOSURE - ready for closure
    @constraint:String {maxLength: 35}
    string status?;
};

# SavingAccountResponse
public type SavingAccountResponse record {
    ArrangementHeader header?;
    SavingAccountResponseBody body?;
};

public type AccountDetailsResponseBodyInner_interests record {
    # Contains the property name of loan interest such as penalty Interest and principal interest.
    string interestPropertyName?;
    # Indicates the interest compound type of an account
    string interestCompoundType?;
    # Indicates the interest compound type value of an account
    string interestCompoundTypeValue?;
    # Interest paid from the start of current year till current date
    decimal interestPaidYtd?;
    # Indicates the interest received last
    decimal lastPaidInterestAmount?;
    # Date last payment was made
    string lastPaymentDate?;
    # Indicates interest accumulated for an account for the defined time period
    string accrualAmount?;
    # Contains the sum of the cash interest expense (including that attributable to Capitalized Leases), net of cash interest income, of the Borrower and the Restricted Subsidiaries, determined on a consolidated basis.
    AccountDetailsResponseBodyInner_consolidateInterests[] consolidateInterests?;
};

# Represents the Queries record for the operation: updatePayoffCurrentAccounts
public type UpdatePayoffCurrentAccountsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Queries record for the operation: createNonResidentAccount
public type CreateNonResidentAccountQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Headers record for the operation: updateAccountLob
public type UpdateAccountLobHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Queries record for the operation: updateAccountStatement
public type UpdateAccountStatementQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# AccountPayoutResponse
public type AccountPayoutResponse record {
    ArrangementHeader header?;
    AccountPayoutResponseBody body?;
};

# Represents the Headers record for the operation: updateAccountSimulation
public type UpdateAccountSimulationHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type CurrentAccountsBodyParties record {
    # Contains the identifier used for the role played by the party or customer in the contract or account
    @constraint:String {maxLength: 30}
    string partyRole?;
    # Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field
    @constraint:String {maxLength: 10}
    string partyId?;
};

public type AccountBalanceMigrationResponseBodyPropertiesBalanceMaintenance record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    AccountBalanceMigrationBodyBalanceMaintenance body?;
};

# Represents the Queries record for the operation: createAccountSimulation
public type CreateAccountSimulationQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type AccountArrangementDetailsResponseBody AccountArrangementDetailsResponseBodyInner[];

public type AccountMigrationResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance noticefee?;
    SavingsAccountResponseBodyPropertiesInheritance periodiccharges?;
    SavingsAccountResponseBodyPropertiesInheritance bonus?;
    SavingsAccountResponseBodyPropertiesCrinterest crinterest?;
    SavingsAccountResponseBodyPropertiesInheritance xisa?;
    SavingsAccountResponseBodyPropertiesInheritance arrangementRules?;
    SavingsAccountResponseBodyPropertiesInheritance inheritance?;
    SavingsAccountResponseBodyPropertiesInheritance xisPoolid?;
    SavingsAccountResponseBodyPropertiesInheritance payfees?;
    SavingsAccountResponseBodyPropertiesSettlement settlement?;
    AccountSimulationResponseBodyPropertiesBalance balance?;
    SavingsAccountResponseBodyPropertiesInheritance activityCharges?;
    SavingsAccountResponseBodyPropertiesInheritance nsfreversalfees?;
    SavingsAccountResponseBodyPropertiesInheritance accreporting?;
    SavingsAccountResponseBodyPropertiesInheritance dormancy?;
    SavingsAccountResponseBodyPropertiesLimit 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance xira?;
    SavingsAccountResponseBodyPropertiesStatement statement?;
    SavingsAccountResponseBodyPropertiesInheritance rewardsPoints?;
    SavingsAccountResponseBodyPropertiesInheritance dormancyfee?;
    SavingsAccountResponseBodyPropertiesInheritance agentCommission?;
    SavingsAccountResponseBodyPropertiesInheritance closurefee?;
    SavingsAccountResponseBodyPropertiesInheritance minbalfee?;
    SavingsAccountResponseBodyPropertiesInheritance txnfee?;
    SavingsAccountResponseBodyPropertiesInheritance balanceMaintenance?;
    SavingsAccountResponseBodyPropertiesInheritance balanceAvailability?;
    SavingsAccountResponseBodyPropertiesInheritance officers?;
    SavingsAccountResponseBodyPropertiesInheritance returnfees?;
    SavingsAccountResponseBodyPropertiesInheritance forcecapitalise?;
    SavingsAccountResponseBodyPropertiesInheritance xrateSetup?;
    SavingsAccountResponseBodyPropertiesInheritance renewal?;
    SavingsAccountResponseBodyPropertiesInheritance mgmtfee?;
    SavingsAccountResponseBodyPropertiesInheritance productQualifierNotice?;
    SavingsAccountResponseBodyPropertiesInheritance limitfees?;
    SavingsAccountResponseBodyPropertiesInheritance payoff?;
    SavingsAccountResponseBodyPropertiesInheritance tax?;
    SavingsAccountResponseBodyPropertiesInheritance messaging?;
    SavingsAccountResponseBodyPropertiesInheritance cashback?;
    SavingsAccountResponseBodyPropertiesInheritance alerts?;
    SavingsAccountResponseBodyPropertiesSchedule schedule?;
    SavingsAccountResponseBodyPropertiesInheritance prefpricing?;
    SavingsAccountResponseBodyPropertiesInheritance cardissuefee?;
    SavingsAccountResponseBodyPropertiesInheritance poNotice?;
    SavingsAccountResponseBodyPropertiesInheritance xtxlimit?;
    SavingsAccountResponseBodyPropertiesInheritance constraint?;
    SavingsAccountResponseBodyPropertiesInheritance facility?;
    SavingsAccountResponseBodyPropertiesCustomer customer?;
};

public type AccountSimulationResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance inhcommitment?;
    SavingsAccountResponseBodyPropertiesInheritance infdrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance servicefee?;
    SavingsAccountResponseBodyPropertiesInheritance periodiccharges?;
    SavingsAccountResponseBodyPropertiesInheritance bonus?;
    SavingsAccountResponseBodyPropertiesInheritance ovdlimitfees?;
    SavingsAccountResponseBodyPropertiesInheritance arcrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance inhpenalint?;
    SavingsAccountResponseBodyPropertiesInheritance noofcredits?;
    SavingsAccountResponseBodyPropertiesInheritance odnotification?;
    AccountSimulationResponseBodyPropertiesBalance balance?;
    SavingsAccountResponseBodyPropertiesInheritance nsfreversalfees?;
    SavingsAccountResponseBodyPropertiesInheritance utllimitfees?;
    SavingsAccountResponseBodyPropertiesInheritance dormancy?;
    SavingsAccountResponseBodyPropertiesInheritance 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance rewardsPoints?;
    SavingsAccountResponseBodyPropertiesInheritance toatax?;
    SavingsAccountResponseBodyPropertiesInheritance closurefee?;
    SavingsAccountResponseBodyPropertiesInheritance minbalfee?;
    SavingsAccountResponseBodyPropertiesInheritance officers?;
    SavingsAccountResponseBodyPropertiesInheritance atmdebitfee?;
    SavingsAccountResponseBodyPropertiesInheritance atmposfee?;
    SavingsAccountResponseBodyPropertiesInheritance withdrawalfee?;
    SavingsAccountResponseBodyPropertiesInheritance xrateSetup?;
    SavingsAccountResponseBodyPropertiesInheritance subscriptionfee?;
    SavingsAccountResponseBodyPropertiesInheritance noofdebits?;
    SavingsAccountResponseBodyPropertiesInheritance mgmtfee?;
    SavingsAccountResponseBodyPropertiesInheritance inheritanceTarget?;
    SavingsAccountResponseBodyPropertiesInheritance tax?;
    SavingsAccountResponseBodyPropertiesInheritance infcrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance messaging?;
    SavingsAccountResponseBodyPropertiesInheritance alerts?;
    SavingsAccountResponseBodyPropertiesInheritance txadtax?;
    SavingsAccountResponseBodyPropertiesInheritance packagefee?;
    SavingsAccountResponseBodyPropertiesInheritance turnoverdebit?;
    SavingsAccountResponseBodyPropertiesInheritance bundleinterest?;
    SavingsAccountResponseBodyPropertiesInheritance overdraft?;
    SavingsAccountResponseBodyPropertiesInheritance xisa?;
    SavingsAccountResponseBodyPropertiesInheritance commitmentfee?;
    SavingsAccountResponseBodyPropertiesInheritance arrangementRules?;
    SavingsAccountResponseBodyPropertiesInheritance xisPoolid?;
    SavingsAccountResponseBodyPropertiesInheritance wirefee?;
    SavingsAccountResponseBodyPropertiesInheritance chequewd?;
    SavingsAccountResponseBodyPropertiesInheritance payfees?;
    SavingsAccountResponseBodyPropertiesInheritance settlement?;
    SavingsAccountResponseBodyPropertiesInheritance activityCharges?;
    SavingsAccountResponseBodyPropertiesInheritance xira?;
    SavingsAccountResponseBodyPropertiesInheritance statement?;
    SavingsAccountResponseBodyPropertiesInheritance dormancyfee?;
    SavingsAccountResponseBodyPropertiesInheritance agentCommission?;
    SavingsAccountResponseBodyPropertiesInheritance txactax?;
    SavingsAccountResponseBodyPropertiesInheritance reporting?;
    SavingsAccountResponseBodyPropertiesInheritance balanceAvailability?;
    SavingsAccountResponseBodyPropertiesInheritance newarrfee?;
    SavingsAccountResponseBodyPropertiesInheritance returnfees?;
    SavingsAccountResponseBodyPropertiesInheritance accharge?;
    SavingsAccountResponseBodyPropertiesInheritance renewal?;
    SavingsAccountResponseBodyPropertiesInheritance inhcrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance limitfees?;
    SavingsAccountResponseBodyPropertiesInheritance payoff?;
    SavingsAccountResponseBodyPropertiesInheritance adminfee?;
    SavingsAccountResponseBodyPropertiesInheritance inheritanceSource?;
    SavingsAccountResponseBodyPropertiesInheritance achcreditfee?;
    SavingsAccountResponseBodyPropertiesInheritance turnovercredit?;
    SavingsAccountResponseBodyPropertiesInheritance cashback?;
    SavingsAccountResponseBodyPropertiesInheritance highestdebit?;
    SavingsAccountResponseBodyPropertiesInheritance schedule?;
    SavingsAccountResponseBodyPropertiesInheritance prefpricing?;
    SavingsAccountResponseBodyPropertiesInheritance cardissuefee?;
    SavingsAccountResponseBodyPropertiesInheritance inhSchedule?;
    SavingsAccountResponseBodyPropertiesInheritance investcredit?;
    SavingsAccountResponseBodyPropertiesInheritance xtxlimit?;
    SavingsAccountResponseBodyPropertiesInheritance ardrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance setupfee?;
    SavingsAccountResponseBodyPropertiesInheritance constraint?;
    SavingsAccountResponseBodyPropertiesInheritance penalint?;
    SavingsAccountResponseBodyPropertiesInheritance facility?;
    SavingsAccountResponseBodyPropertiesInheritance achdebitfee?;
    SavingsAccountResponseBodyPropertiesInheritance customer?;
    SavingsAccountResponseBodyPropertiesInheritance inhdrinterest?;
};

public type AccountWithdrawalNoticeResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountWithdrawalNoticeResponseBodyProperties properties?;
};

public type SavingsAccountResponseBodyPropertiesBalance record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    SavingsAccountBodyBalance body?;
};

# Represents the Queries record for the operation: getAccountArrangementDetails
public type GetAccountArrangementDetailsQueries record {
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

# AccountDormancyDetailsResponse
public type AccountDormancyDetailsResponse record {
    QueryHeader header?;
    AccountDormancyDetailsResponseBody body?;
};

# AccountfacilitiesResponse1
public type AccountfacilitiesResponse1 record {
    QueryHeader header?;
    AccountfacilitiesResponse1Body body?;
};

# AccountChannelResponse
public type AccountChannelResponse record {
    ArrangementHeader header?;
    AccountChannelResponseBody body?;
};

public type AccountDetailsResponseBodyInner_consolidateInterests record {
    # Contains the sum of the cash interest expense and net of cash interest income of the borrower and the restricted subsidiaries determined on a consolidated basis
    string consolidateInterest?;
};

public type AccountCustomerResponseBody record {
    AccountCustomerResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountCustomerResponseBodyProperties properties?;
};

public type AccountWithdrawalNoticeResponseBodyProperties record {
    AccountWithdrawalNoticeResponseBodyPropertiesNoticeWithdrawal noticeWithdrawal?;
};

# Represents the Headers record for the operation: updateAccount
public type UpdateAccountHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Queries record for the operation: deleteCurrentAccounts
public type DeleteCurrentAccountsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type AccountSettlementResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountSettlementResponseBodyProperties properties?;
};

public type AccountfacilitiesResponseBody record {
    CorporateAccountResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountfacilitiesResponseBodyProperties properties?;
};

public type SavingsAccountBodyStatement record {
    # Specifies the frequency in which the payment application(periodic payments) execute the payment instruction
    @constraint:String {maxLength: 17}
    string frequency?;
};

public type AccountCustomerResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance statement?;
    SavingsAccountResponseBodyPropertiesCustomer customer?;
};

# Represents the Headers record for the operation: createSavingsAccount
public type CreateSavingsAccountHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyRestrictionTexts record {
    # Free text information to capture the reason for restriction applied on an account
    @constraint:String {maxLength: 100}
    string restrictionText?;
};

# Represents the Headers record for the operation: updateAccountBranch
public type UpdateAccountBranchHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyAgentArrangementIds record {
    # The id of the arrangement with the 3rd party that has sold the product on behalf of the institution
    @constraint:String {maxLength: 17}
    string agentArrangementId?;
};

# Represents the Headers record for the operation: calculatePayoffCurrentAccounts
public type CalculatePayoffCurrentAccountsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountBranchResponseBody record {
    AccountBranchResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

# AccountMigrationResponse
public type AccountMigrationResponse record {
    ArrangementHeader header?;
    AccountMigrationResponseBody body?;
};

# Represents the Headers record for the operation: getAccountArrangementDetails
public type GetAccountArrangementDetailsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyDefaultSettlementAccounts record {
    # Default settlement account to be used for all incoming payments and outgoing settlements when a specific settlement account is not provided for each payment type
    @constraint:String {maxLength: 90}
    string defaultSettlementAccount?;
};

# AccountInfoResponse
public type AccountInfoResponse record {
    QueryHeader header?;
    AccountInfoResponseBody body?;
};

public type AccountBillMigrationResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountBalanceMigrationResponseBodyProperties properties?;
};

# Represents the Queries record for the operation: createSavingsAccount
public type CreateSavingsAccountQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type ArrangementHeaderAudit record {
    # Time taken to response by Transact
    @jsondata:Name {value: "T24_time"}
    int:Signed32 t24Time?;
    # Time taken to parse the response by IRIS
    @jsondata:Name {value: "responseParse_time"}
    decimal responseParseTime?;
    # The CURR.NO. of the record
    string versionNumber?;
    # Time taken to parse the request by IRIS
    @jsondata:Name {value: "requestParse_time"}
    decimal requestParseTime?;
};

public type SavingsAccountBodyLimit record {
    # Contains the secondary limit amount to be used for the purpose of secondary limit check
    @constraint:String {maxLength: 19}
    string secondaryLimitAmount?;
    # Indicates the extensions
    record {} extensions?;
    # Monitors the availability and utilisation of secondary limits
    @constraint:String {maxLength: 4}
    string secondaryLimit?;
};

# SavingsAccountsResponse
public type SavingsAccountsResponse record {
    ArrangementHeader header?;
    SavingsAccountsResponseBody body?;
};

# AccountBranchResponse
public type AccountBranchResponse record {
    ArrangementHeader header?;
    AccountBranchResponseBody body?;
};

public type PayoffCurrentAccountsResponse1Body record {
    PayoffSavingsAccountsResponse1BodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    PayoffSavingsAccountsResponse1BodyProperties properties?;
};

public type AccountInterestConditionResponseBody record {
    CorporateAccountResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountInterestConditionResponseBodyProperties properties?;
};

# Represents the Queries record for the operation: updateAccountDormancyReactivation
public type UpdateAccountDormancyReactivationQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Headers record for the operation: updatePayoffCurrentAccounts
public type UpdatePayoffCurrentAccountsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Headers record for the operation: cancelAccountWithdrawalNotice
public type CancelAccountWithdrawalNoticeHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyReferences record {
    # Defines the type of attribute used to calculate the custom rate. It is an identifier for the customized rate attributes. It may hold user defined values like currency
    @constraint:String {maxLength: 35}
    string customType?;
    # Defines the value for the corresponding customized rate attribute to calculate custom rate
    @constraint:String {maxLength: 35}
    string customValue?;
    # Defines the name of the customized rate attribute to calculate the custom rate
    @constraint:String {maxLength: 35}
    string customName?;
};

# Represents the Queries record for the operation: createCurrentAccounts
public type CreateCurrentAccountsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type AccountfacilitiesResponseBodyProperties record {
    AccountfacilitiesResponseBodyPropertiesFacility facility?;
};

public type SavingsAccountResponseBodyPropertiesSchedule record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    SavingsAccountBodySchedule body?;
};

# AccountInterestConditionsResponse
public type AccountInterestConditionsResponse record {
    ArrangementHeader header?;
    AccountInterestConditionsResponseBody body?;
};

public type SavingAccountResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance noticefee?;
    SavingsAccountResponseBodyPropertiesInheritance periodiccharges?;
    SavingsAccountResponseBodyPropertiesInheritance bonus?;
    SavingsAccountResponseBodyPropertiesInheritance crinterest?;
    SavingsAccountResponseBodyPropertiesInheritance xisa?;
    SavingsAccountResponseBodyPropertiesInheritance arrangementRules?;
    SavingsAccountResponseBodyPropertiesInheritance inheritance?;
    SavingsAccountResponseBodyPropertiesInheritance xisPoolid?;
    SavingsAccountResponseBodyPropertiesInheritance payfees?;
    SavingsAccountResponseBodyPropertiesInheritance settlement?;
    CorporateAccountResponseBodyPropertiesBalance balance?;
    SavingsAccountResponseBodyPropertiesInheritance activityCharges?;
    SavingsAccountResponseBodyPropertiesInheritance nsfreversalfees?;
    SavingsAccountResponseBodyPropertiesInheritance accreporting?;
    SavingsAccountResponseBodyPropertiesInheritance dormancy?;
    SavingsAccountResponseBodyPropertiesInheritance 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance xira?;
    SavingsAccountResponseBodyPropertiesInheritance statement?;
    SavingsAccountResponseBodyPropertiesInheritance rewardsPoints?;
    SavingsAccountResponseBodyPropertiesInheritance dormancyfee?;
    SavingsAccountResponseBodyPropertiesInheritance agentCommission?;
    SavingsAccountResponseBodyPropertiesInheritance closurefee?;
    SavingsAccountResponseBodyPropertiesInheritance minbalfee?;
    SavingsAccountResponseBodyPropertiesInheritance txnfee?;
    SavingsAccountResponseBodyPropertiesInheritance balanceAvailability?;
    SavingsAccountResponseBodyPropertiesInheritance officers?;
    SavingsAccountResponseBodyPropertiesInheritance returnfees?;
    SavingsAccountResponseBodyPropertiesInheritance forcecapitalise?;
    SavingsAccountResponseBodyPropertiesInheritance xrateSetup?;
    SavingsAccountResponseBodyPropertiesInheritance renewal?;
    SavingsAccountResponseBodyPropertiesInheritance mgmtfee?;
    SavingsAccountResponseBodyPropertiesInheritance productQualifierNotice?;
    SavingsAccountResponseBodyPropertiesInheritance limitfees?;
    SavingsAccountResponseBodyPropertiesInheritance payoff?;
    SavingsAccountResponseBodyPropertiesInheritance tax?;
    SavingsAccountResponseBodyPropertiesInheritance messaging?;
    SavingsAccountResponseBodyPropertiesInheritance cashback?;
    SavingsAccountResponseBodyPropertiesInheritance alerts?;
    SavingsAccountResponseBodyPropertiesInheritance schedule?;
    SavingsAccountResponseBodyPropertiesInheritance prefpricing?;
    SavingsAccountResponseBodyPropertiesInheritance cardissuefee?;
    SavingsAccountResponseBodyPropertiesInheritance poNotice?;
    SavingsAccountResponseBodyPropertiesInheritance xtxlimit?;
    SavingsAccountResponseBodyPropertiesInheritance constraint?;
    SavingsAccountResponseBodyPropertiesInheritance facility?;
    SavingsAccountResponseBodyPropertiesInheritance customer?;
};

public type CurrentAccountsResponseBody record {
    CurrentAccountsResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    CurrentAccountsResponseBodyProperties properties?;
};

public type AccountDetailsResponseBodyInner_taxRates record {
    # Indicates tax charged to an account
    string taxRate?;
};

# AccountAdjustmentResponse
public type AccountAdjustmentResponse record {
    ArrangementHeader header?;
    AccountAdjustmentResponseBody body?;
};

public type SavingsAccountBodyProperties record {
    # Defines the list of properties which will be used for minimum payment amount calculation
    @constraint:String {maxLength: 35}
    string minimumPaymentProperty?;
};

# Represents the Headers record for the operation: updateAccountStatement
public type UpdateAccountStatementHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# ForwardEntriesResponse
public type ForwardEntriesResponse record {
    ForwardEntriesResponseQueryHeader header?;
    ForwardEntriesResponseBody body?;
};

public type PayoffSavingsAccountsResponse1BodyPropertiesSettlement record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    PayoffSavingsAccounts1BodySettlement body?;
};

public type PayoffCurrentAccountsResponseBody record {
    PayoffSavingsAccountsResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    PayoffSavingsAccountsResponseBodyProperties properties?;
};

public type AccountWithdrawalNoticeBodyNoticeWithdrawal record {
    # Specifies the maximum local currency amount that can be withdrawn in a single transaction without incurring an override
    @constraint:String {maxLength: 18}
    string noticeAmount?;
    # Indicates the extensions
    record {} extensions?;
    # Contains the notice reference number. Possible values can be retrieved through the API, 'v4.3.0/holdings/arrangements/{arrangementId}/noticeUpdates'
    @constraint:String {maxLength: 35}
    string noticeReference?;
    # Indicates the bill reference or Id
    @constraint:String {maxLength: 80}
    string billId?;
    # Specifies the type of notice like 'Blank/withdrawal' notice or 'Closure' notice
    @constraint:String {maxLength: 35}
    string noticeType?;
    # Contains the date on which the transaction or payment gets initiated
    @constraint:String {maxLength: 11}
    string startDate?;
};

public type PayoffSavingsAccounts1BodyRepayment record {
    # Indicates the transaction reference for which the history of transactions is requested. It is steered by the attribute 'booked' given the start date and end date or the entry from which the history is requested
    SavingsAccountBodyReference[] reference?;
    # Contains the transaction recycling rules which define the set of retry conditions
    @constraint:String {maxLength: 35}
    string payInRCCondition?;
    # Contains the transaction type used by the transaction recycler for retrying the debits
    @constraint:String {maxLength: 35}
    string payInRCType?;
    # Indicates if the payment is Customer (C) type or Bank (B) type
    SavingsAccountBodyPaymentTypes[] paymentTypes?;
    # Flag to indicate whether Payin Settlement instruction is required or not.Valid input is Yes or No.Default value is Yes
    @constraint:String {maxLength: 3}
    string payInSettlement?;
};

# Represents the Headers record for the operation: createAccountsArrangements
public type CreateAccountsArrangementsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Queries record for the operation: initiateAccountPayin
public type InitiateAccountPayinQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Headers record for the operation: updateAccountDormancyStatus
public type UpdateAccountDormancyStatusHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Headers record for the operation: deleteSavingsAccounts
public type DeleteSavingsAccountsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyReferalCodes record {
    # Indicates the conditions under which account details or details of entries over the account are to be included in an end of day report for referral to the account officer responsible. Referral conditions can be defined depending on transaction such as transaction code, amount and sign, or the balance of the Account
    @constraint:String {maxLength: 35}
    string referalCode?;
};

# Represents the Headers record for the operation: updateAccountDebit
public type UpdateAccountDebitHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# MudarabaSavingAccountResponse
public type MudarabaSavingAccountResponse record {
    ArrangementHeader header?;
    MudarabaSavingAccountResponseBody body?;
};

public type PayoffSavingsAccounts1BodyPayoutpropertyclasses record {
    # Contains the different payout options, for example charge, interest or principal on which the payout settlement instructions would be processed
    @constraint:String {maxLength: 30}
    string payoutpropertyclass?;
};

# Represents the Queries record for the operation: updateAccount
public type UpdateAccountQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type SavingsAccountBodyMessageTime record {
    # Denotes the time in which the message will be sent automatically
    @constraint:String {maxLength: 5}
    string messageTime?;
};

public type AccountDormancyDetailsResponseBodyInner_dormancyStatuses record {
    # Specifies the operative status of the acount like inactive, dormant,unclaimed etc.,
    string dormancyStatus?;
    # Indicates spread of time buckets.Ex: 3M,6M,9M,10Y etc.
    @constraint:String {maxLength: 4}
    string period?;
    # The charges or fees for this transaction
    string charge?;
    # Indicates the frequency in which the periodic charges are posted. Allowed values are for example, 20091223DAILY. It is mandatory when the charge frequency is set as periodic.
    @constraint:String {maxLength: 20}
    string chargeFrequency?;
};

# Represents the Headers record for the operation: updateAccountInterestConditions
public type UpdateAccountInterestConditionsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Queries record for the operation: updateAccountChannel
public type UpdateAccountChannelQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type AccountCreditResponseBody record {
    PayoffSavingsAccountsResponse1BodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

# Represents the Queries record for the operation: updateAccountBranch
public type UpdateAccountBranchQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type CorporateAccountResponseBody record {
    CorporateAccountResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    CorporateAccountResponseBodyProperties properties?;
};

public type SavingsAccountBodyProperty record {
    # The identifier of the product condition
    @constraint:String {maxLength: 30}
    string propertyId?;
};

public type AccountScheduleResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesSchedule schedule?;
    SavingsAccountResponseBodyPropertiesInheritance inhSchedule?;
    SavingsAccountResponseBodyPropertiesInheritance settlement?;
};

# PayoffCurrentAccountsResponse
public type PayoffCurrentAccountsResponse record {
    ArrangementHeader header?;
    PayoffCurrentAccountsResponseBody body?;
};

public type AccountInfoResponseBody AccountInfoResponseBodyInner[];

public type BusinessAccountResponseBodyPropertiesBalance record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    BusinessAccountBodyBalance body?;
};

# Represents the Headers record for the operation: createMinorAccount
public type CreateMinorAccountHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Headers record for the operation: updateAccountConditions
public type UpdateAccountConditionsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type QueryHeader record {
    ArrangementHeaderAudit audit?;
    # The record from which the response should be displayed
    @jsondata:Name {value: "page_start"}
    int:Signed32 pageStart?;
    # The total number of records present
    @jsondata:Name {value: "total_size"}
    int:Signed32 totalSize?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @jsondata:Name {value: "page_token"}
    string pageToken?;
    # Status of the API(success/failed)
    string status?;
    # The total number of records per page
    @jsondata:Name {value: "page_size"}
    int:Signed32 pageSize?;
};

# PayoffSavingsAccountsResponse
public type PayoffSavingsAccountsResponse record {
    ArrangementHeader header?;
    PayoffSavingsAccountsResponseBody body?;
};

# Represents the Queries record for the operation: updateAccountCustomer
public type UpdateAccountCustomerQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type AccountfacilitiesBodyFacility record {
    # Indicates the extensions
    record {} extensions?;
    # It specifies the list of services related to the arrangement
    AccountfacilitiesBodyServices[] services?;
};

public type SavingsAccountBodyShortTitles record {
    # Display name or short name of the account specified
    @constraint:String {maxLength: 70}
    string accountName?;
};

public type AccountBalanceMigrationResponseBodyProperties record {
    AccountBalanceMigrationResponseBodyPropertiesBalanceMaintenance balanceMaintenance?;
};

public type AccountPayoffAutoSimulationBodySettlement record {
    # Indicates the extensions
    record {} extensions?;
    # Specifies whether the settlement has to be combined for payments with same frequency, same beneficiary and same payment order product
    @constraint:String {maxLength: 3}
    string consolidatePayments?;
    AccountPayoffAutoSimulationBodyPayin[] payin?;
    AccountPayoffAutoSimulationBodyBasicRepayment[] basicRepayment?;
};

public type SavingsAccountBodyReference record {
    # Contains the percentage of the payment amount used for settlement of the bills due
    @constraint:String {maxLength: 35}
    string payInPercentage?;
    # Contains the payment order product Id for which the payment is initiated
    @constraint:String {maxLength: 35}
    string payInPoProduct?;
    # Contains the transaction type used to debit the customer account for settlement of the bills due
    @constraint:String {maxLength: 55}
    string payInActivity?;
    # Contains the account from which funds are to be debited against the payment type
    @constraint:String {maxLength: 90}
    string payInAccount?;
    # Contains the finite amount of the payment used for settlement of the bills due
    @constraint:String {maxLength: 35}
    string payInAmount?;
    # Contains the beneficiary Id used for settlement of the bills due
    @constraint:String {maxLength: 17}
    string payInBeneficiary?;
    # Contains the direct debit mandate reference (dd) when the settlement method is set to direct debit. The dd reference is typically the account number followed by a suffix, for example 15245.1
    @constraint:String {maxLength: 25}
    string ddMandateReference?;
};

public type AccountBranchResponseBodyArrangementActivity record {
    # Indicates the extensions
    record {} extensions?;
    # Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant
    @constraint:String {maxLength: 16}
    string branch?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    string effectiveDate?;
};

public type AccountPayoffAutoSimulationResponseBodyPropertiesSettlement record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    AccountPayoffAutoSimulationBodySettlement body?;
};

# Represents the Queries record for the operation: deleteSavingsAccounts
public type DeleteSavingsAccountsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type CurrentAccountsResponseBodyPropertiesBalance record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    CurrentAccountsBodyBalance body?;
};

public type ArrangementHeader record {
    # The status of the transaction
    string transactionStatus?;
    ArrangementHeaderAudit audit?;
    # The Identifier of the aa record created
    string aaaId?;
    # The Identifier of the record created
    string id?;
    # Status of the API(success/failed)
    string status?;
    # The unique identifier/Message Reference of the record created
    string uniqueIdentifier?;
};

public type PayoffSavingsAccountsResponseBodyPropertiesPayoff record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    PayoffSavingsAccountsBodyPayoff body?;
};

# Represents the Headers record for the operation: createCurrentAccounts
public type CreateCurrentAccountsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountResponseBodyActivitiesactivityName record {
    string activity?;
    # The status of the transaction
    string transactionStatus?;
    # The Identifier of the record created
    string id?;
};

public type SavingsAccountBodyCrinterest record {
    # The interest rate is chosen from a selection of values which represent different interest types and rates
    @constraint:String {maxLength: 4}
    string floatingRate?;
    # Defines the minimum interest amount that will be compared to the system calculated interest amount. If the interest calculated is less than the minimum amount set, then based on the waive setup  either the min interest amount would be applied or it would be waived
    @constraint:String {maxLength: 19}
    string minIntAmount?;
    # Indicates the transaction reference for which the history of transactions is requested. It is steered by the attribute 'booked' given the start date and end date or the entry from which the history is requested
    SavingsAccountBodyReferences[] references?;
    # The percent defined will be applied on the reference rate before applying margin and other interest adjustments
    @constraint:String {maxLength: 6}
    string usagePercent?;
    # Indicates whether accruals needs to be Suppressed or Accrual should be done for the Alternate Interest Property. Allowed values are Yes, Alternate, info only, null
    @constraint:String {maxLength: 10}
    string suppressAccrual?;
    # Specify the period which will be used to fetch the interest rate
    @constraint:String {maxLength: 20}
    string periodicRate?;
    # The maximum rate that can be applied at each tier
    @constraint:String {maxLength: 13}
    string maximumTierRate?;
    # The product condition has an activity type associated that drives an action
    @constraint:String {maxLength: 15}
    string 'type?;
    # Specifies the type to be used for risk free rates calculation. Allowed options are NARROW, OBSERVATION SHIFT. Narrow Definition: Apply original interest period’s day count to the look back rate used for this day (i.e. if the Wednesday rate is used for Friday, apply the Friday’s weight, three days, to Wednesday’s rate). Observation Shift: Apply the original day count of the look back rate (i.e. if the Wednesday rate is used for Friday, apply the Wednesday’s own weight, one day, and do not use Friday’s day count for it)
    @constraint:String {maxLength: 30}
    string rfrLookbackType?;
    # Define the market convention to be used as risk free rate calculation convention
    @constraint:String {maxLength: 15}
    string rfrConvention?;
    # Interest amount
    SavingsAccountBodyInterest[] interest?;
    # Indicates how the effective rate is calculated, when set to YIELD the interest rate defined is taken as the annual effective rate
    @constraint:String {maxLength: 8}
    string compoundYieldMethod?;
    # Specifies the Interest component of the linked contract that should be referred for getting the Interest Rate
    @constraint:String {maxLength: 30}
    string linkedProperty?;
    # Recalculates the periodic rate when certain activities (e.g. LENDING-CHANGE-PRINCIPAL.INTEREST, LENDING-DISBURSE-COMMITMENT) is processed
    @constraint:String {maxLength: 35}
    string recalculate?;
    # Different interest rates can be applied for tiers determined by monetary amounts.  Standard selection to choose from - Single, Level, Banded
    @constraint:String {maxLength: 6}
    string rateTierType?;
    # Define how the Spread inputted in the interest definition would be used as part of risk free rate calculation. Inclusive – The spread inputted in definition will be used in risk free rate formula itself to calculate the Compounding RFR rate. Exclusive – The spread inputted in the definition will be added on top of formula calculated Compounding RFR rate
    @constraint:String {maxLength: 15}
    string rfrSpreadTreatment?;
    # Indicates the activities which will necessiate a recalculation of the schedules, ex, change of term, principal increase, etc,
    @constraint:String {maxLength: 80}
    string onThisActivity?;
    # Indicates spread of time buckets.Ex: 3M,6M,9M,10Y etc
    @constraint:String {maxLength: 15}
    string period?;
    # The account which is linked for calculating interest that should be applied to this account
    @constraint:String {maxLength: 20}
    string linkedArrangement?;
    # A pricing plan can be applied to an account, the selection is automatic or manual
    @constraint:String {maxLength: 15}
    string method?;
    # This field indicates if the calculated interest amount has to be waived or adjusted. If the field is set to YES, then the system will waive the interest amount if it is less than the minimum interest amount specified.If NULL value is set and if the calculated interest amount is less than the minimum interest amount  specified, then system will post the minimum interest amount
    @constraint:String {maxLength: 3}
    string minIntWaive?;
    # Define the type of formula used to calculate the rate. There are two types.  1. Simple - Simple Average Calculation (Arithmetic Mean) 2. Compound -  Compound Average Calculation (geometric mean)
    @constraint:String {maxLength: 15}
    string rfrCalculationMethod?;
    # The user can specify that interest will only be calculated if a balance threshold is surpassed. For credit interest, the user can specify the minimum balance which must be maintained. For debit interest, the user can specify the maximum debit balance for which interest will not be calculated
    @constraint:String {maxLength: 19}
    string calcThreshold?;
    # Determines the amounts which has to be included in each day's balance while accruing interest, the actual days to include in the period(eg: first day, last day) and how to round any calculations
    @constraint:String {maxLength: 35}
    string accrualRule?;
    # A minimum interest rate can be applied at each tier
    @constraint:String {maxLength: 13}
    string minimumTierRate?;
    # Specifies the initial date from which the interest rate has to be reset. If specified along with a reset frequency, the initial reset date will be used for deriving the subsequent reset dates
    @constraint:String {maxLength: 30}
    string initialDate?;
    # Determine how the risk free rates will be used  when calculating the compounding risk free rate. TODAY – The formula will use only risk free rate till TODAY from Period Start date, and calculate the Compounding rate.  FULL – The formula will use the risk free rates for FULL period from Period Start date to Period End date when calculating compounding rate. 
    @constraint:String {maxLength: 20}
    string rfrRoundingRule?;
    # Denotes an index which points to the right period of the securities or holdings
    @constraint:String {maxLength: 4}
    string periodicIndex?;
    # This field defines the number of compounding periods to be applied.Compounding interest applies a factor to the compound interest calculation based upon the number of compounding periods in the year
    @constraint:String {maxLength: 15}
    string compounding?;
    # The interest rate for the tier can be linked to that of another account, YES/NO indicator
    @constraint:String {maxLength: 4}
    string linkedRateIndicator?;
    # Specifies the backward looking period for the risk free rates calculation. Example – An arrangement is creating on 15-May-2020 with look back days as 2. Then during RFR compounding rate calculation, system would use the risk free rate published on 13-May-2020. So, it will look back to 2 days and get the rate
    @constraint:String {maxLength: 2}
    string rfrLookbackDays?;
    # Determine how the risk free rates will be used  when calculating the compounding risk free rate. TODAY – The formula will use only risk free rate till TODAY from Period Start date, and calculate the Compounding rate.  FULL – The formula will uses the risk free rates for FULL period from Period Start date to Period End date when calculating compounding rate
    @constraint:String {maxLength: 15}
    string rfrPeriodDayCount?;
    # Indicates the extensions
    record {} extensions?;
    # Numeric value for the interest rate entered manually
    @constraint:String {maxLength: 13}
    string fixedRate?;
    # This indicates the reset period of the index stated. System would automatically reset the periodic rate at the frequency stated here
    @constraint:String {maxLength: 30}
    string reset?;
    # This field along with fieldName and value, defines the conditions for the alert to be triggered
    @constraint:String {maxLength: 9}
    string operand?;
};

public type SavingsAccountBodyCustomers record {
    # Tax liability percentage of the customer
    @constraint:String {maxLength: 12}
    string taxLiabilityPercentage?;
    # Indicates percentage of limit allocated to the customer out of overall limit
    @constraint:String {maxLength: 12}
    string limitAllocactionPercentage?;
    # Indicates GL allocation percentage of the customer
    @jsondata:Name {value: "GLAllocactionPercentage"}
    string gLAllocactionPercentage?;
    # Indicates role of a customer for an arrangement
    @constraint:String {maxLength: 30}
    string customerRole?;
    # Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed
    @constraint:String {maxLength: 10}
    string customer?;
};

# Represents the Queries record for the operation: getPastStatements
public type GetPastStatementsQueries record {
    # Specifies the Carrier by which the message was received
    string carrierAddressId?;
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed
    string customer?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

public type AccountSimulationBodyBalance record {
    # An Alternate Identification for the Deal. This can be used to retrieve the Deal for amendment
    AccountSimulationBodyAlternateIds[] alternateIds?;
    # Identifier of the account in source system, eg, a origination system
    @constraint:String {maxLength: 35}
    string originationReference?;
    # Defines if anniversaryDate or start date is based on account creation or once disbursement is done. Allowed values are ARRANGEMENT and DISBURSEMENT. ARRANGEMENT indicates that account start period is considered as arrangement creation time. If set as DISBURSEMENT the account start period is based on disbursement activity date
    @constraint:String {maxLength: 10}
    string baseDateType?;
    # Identifies any restrictions for posting entries that are to be imposed on the Account
    AccountSimulationBodyPostingRestrictions[] postingRestrictions?;
    # Indicates the accounting company of the account record
    @constraint:String {maxLength: 11}
    string accountingCompany?;
    # Indicates the number of months without customer activity before an account is declared as inactive
    @constraint:String {maxLength: 3}
    string inactiveMonths?;
    # Defines the behavior when recurring payment dates falls on a weekend or bank holiday. The payment is then executed either the 'preceding' or 'following' working day. ASPSP might reject the request due to the communicated value, if rules in Online-Banking are not supporting this execution rule
    @constraint:String {maxLength: 15}
    string dateAdjustment?;
    # Indicates the conditions under which account details or details of entries over the account are to be included in an end of day report for referral to the account officer responsible. Referral conditions can be defined depending on transaction such as transaction code, amount and sign, or the balance of the Account
    SavingsAccountBodyReferalCodes[] referalCodes?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    @constraint:String {maxLength: 35}
    string accountId?;
    # Indicates the extensions
    record {} extensions?;
    # Id of the portfolio or security account
    @constraint:String {maxLength: 35}
    string portfolioId?;
    # Indicates the option to specify the basis for deriving the future event dates.Allowed values are previous(last adjusted event date will be used for deriving) ,base(last unadjusted event date provided by user will be used for deriving and null(change product ,renewal event base date will be used for deriving)
    @constraint:String {maxLength: 10}
    string baseDateKey?;
    # Title line 2 that will appear in notice and statements
    SavingsAccountBodyAccountTitles2[] accountTitles2?;
    # The reference which is provided to the beneficiary/ creditor by the originator of payment
    @constraint:String {maxLength: 16}
    string customerReference?;
    # Short title on an account
    SavingsAccountBodyAccountTitles[] accountTitles?;
    # The country or region code to be considered for determining the holidays and used while calculating the schedule dates
    SavingsAccountBodyBusinessDayCentres[] businessDayCentres?;
    # Shortcut code for referring an Entity/Company/Branch
    @constraint:String {maxLength: 10}
    string mnemonic?;
    # Indicates the type of Annual Percentage Rate calculation selected for Reporting. Available options such as Cashflow,Interest
    SavingsAccountBodyAprTypes[] aprTypes?;
    # Contains the short title given to the name of an account or an arrangement
    AccountSimulationBodyShortTitles[] shortTitles?;
    # Indicates how the schedule date has to be adjusted when the schedule falls on a holiday. Allowed values are BACKWARD, FORWARD, FORWARD SAME MONTH or CALENDAR
    @constraint:String {maxLength: 18}
    string dateConvention?;
    # Indicates the account or contract product name. For example for an account this maybe current, savings etc
    @constraint:String {maxLength: 5}
    string category?;
    # The start or end period defined in MMDD format to indicate the period when charge rules has to be applied
    @constraint:String {maxLength: 6}
    string anniversary?;
};

public type SavingsAccountBodyUnrestrictionTexts record {
    # Reason for unblocking the restriction set on an account
    @constraint:String {maxLength: 100}
    string unrestrictionText?;
};

# Represents the Queries record for the operation: updateAccountSchedule
public type UpdateAccountScheduleQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type SavingsAccountBodyMessage record {
    # It denotes whether the sending of message MT941 (Balance Report) / MT942 (Interim Transaction Report) happens on an ad-hoc or timed daily basis
    @constraint:String {maxLength: 3}
    string sendType?;
    # The product condition has an activity type associated that drives an action
    @constraint:String {maxLength: 3}
    string 'type?;
};

public type SavingsAccountBodySettlement record {
    # Indicates the extensions
    record {} extensions?;
    SavingsAccountBodyOffset[] offset?;
    # Details of the concentration account to which the surplus funds available in the sweeping account is paid out to
    SavingsAccountBodyPayout[] payout?;
    # If this field is set to YES, then whenever user changes the Payin settlement accounts then the modified accounts should affect the pending funding requests raised for the current overdue Bills. If this field is set to NO or blank then the changes to the payin settlement accounts apply to the next due bills
    @constraint:String {maxLength: 3}
    string updatePendingRetry?;
    # Default settlement account to be used for all incoming payments and outgoing settlements when a specific settlement account is not provided for each payment type
    SavingsAccountBodyDefaultSettlementAccounts[] defaultSettlementAccounts?;
    SavingsAccountBodyRepayment[] repayment?;
};

public type BusinessAccountBodyBalance record {
    # Indicates the extensions
    record {} extensions?;
    # An Alternate Identification for the Deal. This can be used to retrieve the Deal for amendment
    SavingsAccountBodyAlternateIds[] alternateIds?;
};

public type AccountMigrationBodyOriginationReference record {
    # Field name returned by the payment engine (TPH) for information or further processing
    @constraint:String {maxLength: 45}
    string contextName?;
    # Field value returned by the payment engine (TPH) for information or further processing
    @constraint:String {maxLength: 100}
    string contextValue?;
};

public type AccountPayoffAutoSimulationBodyBasicRepayment record {
    # Indicates if the settlement is automatic at the Customer / Broker side
    @constraint:String {maxLength: 3}
    string autoSettle?;
};

public type AccountDetailsResponseBodyInner record {
    # Shows reserved amount for the underlying account for a given balance reservation event
    decimal lockedAmount?;
    # Contains the account details which shares the interest among the eligible or joint customers
    AccountDetailsResponseBodyInner_sharedInterestAccounts[] sharedInterestAccounts?;
    # Contains the overdraft limit still available to be utilized
    decimal availableOverdraftLimit?;
    # Denotes the accounts in which the credit card Limit is assigned to the customer across all the credit cards
    AccountDetailsResponseBodyInner_sharedLimitAccounts[] sharedLimitAccounts?;
    # Field denotes the currency set as allowed currency in Master account conditions
    AccountDetailsResponseBodyInner_allowedcurrencies[] allowedcurrencies?;
    # Indicates the available balance allowed to use
    decimal onlineClearedBalance?;
    # Contains the total number of credits
    string totalCredits?;
    # Indicates tax charged to an account
    AccountDetailsResponseBodyInner_taxRates[] taxRates?;
    # Indicates the opening balance after clearing
    decimal openClearedBalance?;
    # Contains the total of the deposit amounts which may be available for use in near future
    decimal totalPendingDepositAmount?;
    # Date on which the credit facility application is opened
    string openingDate?;
    # Indicates the outstanding overdraft limit of an account
    decimal outstandingOverdraftLimit?;
    # Contains the total number of debits
    string totalDebits?;
    # Contains the approved overdraft limit
    decimal approvedOverdraftLimit?;
    # International Bank Account number, an identifier of the account. E.g. GB29 NWBK 6016 1331 9268 19
    @jsondata:Name {value: "IBAN"}
    string iBAN?;
    # Joint or related customer id
    AccountDetailsResponseBodyInner_jointCustomers[] jointCustomers?;
    # Contains the total withdrawal amount on hold until payment execution date
    decimal totalPendingWithdrawalAmount?;
    # Contains the opening actual balance of an account
    decimal openActualBalance?;
    # Indicates the profit rate for the contract
    string profitRate?;
    # Indicates the name of the customer. Originator is the party who requests the payment cancellation
    string customerName?;
    # This field specifies the validity of the Limit, i.e. how long is it to remain in force
    string limitExpiryDate?;
    # This is the BIC code of the institution where beneficiary holds an account
    string accountWithBankBIC?;
    # Total funds available in the account after all the ongoing transactions have been completed
    decimal availableFunds?;
    # The charges or fees for this transaction
    AccountDetailsResponseBodyInner_charges[] charges?;
    # Indicates the extension data
    record {} extensions?;
    # Indicates the total amount which will be lent or deposited for the term
    decimal commitmentAmount?;
    # Interest amount
    AccountDetailsResponseBodyInner_interests[] interests?;
};

public type AccountSimulationBodyAlternateIds record {
    # Contains the alternate account system identifier used for defining the alternate account Id
    @constraint:String {maxLength: 10}
    string alternateIdType?;
};

# Represents the Queries record for the operation: getForwardEntries
public type GetForwardEntriesQueries record {
    # Polarity (sign) used to denote buy position balance.  
    string longPositionSign?;
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)
    string valueDate?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

public type AccountMigrationResponseBody record {
    AccountMigrationResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountMigrationResponseBodyProperties properties?;
};

public type AccountStatementResponseBody AccountStatementResponseBodyInner[];

public type AccountProductResponseBodyArrangementActivity record {
    # Indicates the extensions
    record {} extensions?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account
    @constraint:String {maxLength: 30}
    string productId?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    string effectiveDate?;
};

# Represents the Headers record for the operation: updateAccountCustomer
public type UpdateAccountCustomerHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# AccountSimulationResponse
public type AccountSimulationResponse record {
    ArrangementHeader header?;
    AccountSimulationResponseBody body?;
};

public type AccountDormancyDetailsResponseBodyInner record {
    # Indicates an unique identifier of an account
    @constraint:String {maxLength: 30}
    string arrangementId?;
    # Indicates the extension data
    record {} extensions?;
    # Indicates the Dormancy status
    AccountDormancyDetailsResponseBodyInner_dormancyStatuses[] dormancyStatuses?;
};

# Represents the Queries record for the operation: updateAccountfacilities
public type UpdateAccountfacilitiesQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Headers record for the operation: updateAccountProduct
public type UpdateAccountProductHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# AccountArrangementDetailsResponse
public type AccountArrangementDetailsResponse record {
    QueryHeader header?;
    AccountArrangementDetailsResponseBody body?;
};

public type PayoffSavingsAccounts1BodySettlement record {
    # Indicates the extensions
    record {} extensions?;
    # Details of the concentration account to which the surplus funds available in the sweeping account is paid out to
    PayoffSavingsAccounts1BodyPayout[] payout?;
    PayoffSavingsAccounts1BodyRepayment[] repayment?;
};

public type PayoffSavingsAccountsBodyOverrides record {
    # The override message is captured  that was generated at the time of commitment of the transaction to the database
    @constraint:String {maxLength: 35}
    string override?;
};

public type SavingsAccountBodyOffsetProperties record {
    # Indicates the property class which needs to be used for settlement offset
    @constraint:String {maxLength: 30}
    string offsetPropertyClass?;
    # Indicates the property which needs to be used for settlement offset
    @constraint:String {maxLength: 35}
    string offsetProperty?;
};

public type AccountAdjustmentResponseBody record {
    PayoffSavingsAccountsResponse1BodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

public type AccountPayoffAutoSimulationResponseBodyPropertiesPayoff record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    AccountPayoffAutoSimulationBodyPayoff body?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type SavingsAccountBodyPaymentTypes record {
    # Indicates if the payment is Customer (C) type or Bank (B) type
    @constraint:String {maxLength: 30}
    string paymentType?;
};

public type CurrentAccountsResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance inhcommitment?;
    SavingsAccountResponseBodyPropertiesInheritance infdrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance servicefee?;
    SavingsAccountResponseBodyPropertiesInheritance periodiccharges?;
    SavingsAccountResponseBodyPropertiesInheritance bonus?;
    SavingsAccountResponseBodyPropertiesInheritance ovdlimitfees?;
    SavingsAccountResponseBodyPropertiesInheritance inhpenalint?;
    SavingsAccountResponseBodyPropertiesInheritance drinterest?;
    SavingsAccountResponseBodyPropertiesInheritance noofcredits?;
    SavingsAccountResponseBodyPropertiesInheritance odnotification?;
    CurrentAccountsResponseBodyPropertiesBalance balance?;
    SavingsAccountResponseBodyPropertiesInheritance nsfreversalfees?;
    SavingsAccountResponseBodyPropertiesInheritance bundledrinterst?;
    SavingsAccountResponseBodyPropertiesInheritance utllimitfees?;
    SavingsAccountResponseBodyPropertiesInheritance dormancy?;
    SavingsAccountResponseBodyPropertiesInheritance 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance rewardsPoints?;
    SavingsAccountResponseBodyPropertiesInheritance closurefee?;
    SavingsAccountResponseBodyPropertiesInheritance minbalfee?;
    SavingsAccountResponseBodyPropertiesInheritance officers?;
    SavingsAccountResponseBodyPropertiesInheritance atmdebitfee?;
    SavingsAccountResponseBodyPropertiesInheritance atmposfee?;
    SavingsAccountResponseBodyPropertiesInheritance withdrawalfee?;
    SavingsAccountResponseBodyPropertiesInheritance xrateSetup?;
    SavingsAccountResponseBodyPropertiesInheritance subscriptionfee?;
    SavingsAccountResponseBodyPropertiesInheritance noofdebits?;
    SavingsAccountResponseBodyPropertiesInheritance mgmtfee?;
    SavingsAccountResponseBodyPropertiesInheritance inheritanceTarget?;
    SavingsAccountResponseBodyPropertiesInheritance tax?;
    SavingsAccountResponseBodyPropertiesInheritance infcrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance messaging?;
    SavingsAccountResponseBodyPropertiesInheritance internalintcr2?;
    SavingsAccountResponseBodyPropertiesInheritance alerts?;
    SavingsAccountResponseBodyPropertiesInheritance packagefee?;
    SavingsAccountResponseBodyPropertiesInheritance turnoverdebit?;
    SavingsAccountResponseBodyPropertiesInheritance bundleinterest?;
    SavingsAccountResponseBodyPropertiesInheritance overdraft?;
    SavingsAccountResponseBodyPropertiesInheritance crinterest?;
    SavingsAccountResponseBodyPropertiesInheritance xisa?;
    SavingsAccountResponseBodyPropertiesInheritance commitmentfee?;
    SavingsAccountResponseBodyPropertiesInheritance arrangementRules?;
    SavingsAccountResponseBodyPropertiesInheritance xisPoolid?;
    SavingsAccountResponseBodyPropertiesInheritance wirefee?;
    SavingsAccountResponseBodyPropertiesInheritance chequewd?;
    SavingsAccountResponseBodyPropertiesInheritance internalintdr?;
    SavingsAccountResponseBodyPropertiesInheritance payfees?;
    SavingsAccountResponseBodyPropertiesInheritance settlement?;
    SavingsAccountResponseBodyPropertiesInheritance activityCharges?;
    SavingsAccountResponseBodyPropertiesInheritance xira?;
    SavingsAccountResponseBodyPropertiesInheritance bundlecrinterst?;
    SavingsAccountResponseBodyPropertiesInheritance statement?;
    SavingsAccountResponseBodyPropertiesInheritance dormancyfee?;
    SavingsAccountResponseBodyPropertiesInheritance agentCommission?;
    SavingsAccountResponseBodyPropertiesInheritance reporting?;
    SavingsAccountResponseBodyPropertiesInheritance balanceAvailability?;
    SavingsAccountResponseBodyPropertiesInheritance returnfees?;
    SavingsAccountResponseBodyPropertiesInheritance accharge?;
    SavingsAccountResponseBodyPropertiesInheritance renewal?;
    SavingsAccountResponseBodyPropertiesInheritance inhcrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance limitfees?;
    SavingsAccountResponseBodyPropertiesInheritance payoff?;
    SavingsAccountResponseBodyPropertiesInheritance internalintcr?;
    SavingsAccountResponseBodyPropertiesInheritance adminfee?;
    SavingsAccountResponseBodyPropertiesInheritance inheritanceSource?;
    SavingsAccountResponseBodyPropertiesInheritance achcreditfee?;
    SavingsAccountResponseBodyPropertiesInheritance internalintdr2?;
    SavingsAccountResponseBodyPropertiesInheritance turnovercredit?;
    SavingsAccountResponseBodyPropertiesInheritance cashback?;
    SavingsAccountResponseBodyPropertiesInheritance highestdebit?;
    SavingsAccountResponseBodyPropertiesInheritance schedule?;
    SavingsAccountResponseBodyPropertiesInheritance prefpricing?;
    SavingsAccountResponseBodyPropertiesInheritance cardissuefee?;
    SavingsAccountResponseBodyPropertiesInheritance inhSchedule?;
    SavingsAccountResponseBodyPropertiesInheritance investcredit?;
    SavingsAccountResponseBodyPropertiesInheritance xtxlimit?;
    SavingsAccountResponseBodyPropertiesInheritance setupfee?;
    SavingsAccountResponseBodyPropertiesInheritance constraint?;
    SavingsAccountResponseBodyPropertiesInheritance penalint?;
    SavingsAccountResponseBodyPropertiesInheritance facility?;
    SavingsAccountResponseBodyPropertiesInheritance achdebitfee?;
    SavingsAccountResponseBodyPropertiesInheritance customer?;
    SavingsAccountResponseBodyPropertiesInheritance inhdrinterest?;
};

public type PayoffSavingsAccountsBodyCustomerIds record {
    # Identifier of the customer
    @constraint:String {maxLength: 10}
    string customerId?;
    # Indicates role of a customer for an arrangement
    @constraint:String {maxLength: 30}
    string customerRole?;
};

public type AccountLimitResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountLimitResponseBodyProperties properties?;
};

# AccountBillMigrationResponse
public type AccountBillMigrationResponse record {
    ArrangementHeader header?;
    AccountBillMigrationResponseBody body?;
};

# AccountStatementResponse
public type AccountStatementResponse record {
    AccountStatementResponseQueryHeader header?;
    AccountStatementResponseBody body?;
};

public type AccountStatementResponseQueryHeaderData record {
    # Identifies the country of the customer or a property or organization
    @constraint:String {maxLength: 25}
    string country?;
    # Indicates the date till which the transaction history requested. If 20120101 is the start date and 20120201 is the end date, all transactions that are booked between January 1 to February 1 2012 are returned
    string endDate?;
    # Short title on an account
    @constraint:String {maxLength: 35}
    string accountTitle?;
    # Groups the products based on their type, eg, Checking, Savings, CD etc,
    @constraint:String {maxLength: 35}
    string accountType?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    @constraint:String {maxLength: 19}
    string accountNumber?;
    # Date of the current business day for all online activities in the selected Company. This field is updated automatically with the date from 'nextWorkingDay' during the Close of Business processing
    @constraint:String {maxLength: 11}
    string todayDate?;
    # Total amount
    @constraint:String {maxLength: 19}
    string totalAmount?;
    # Contains the total number of credits
    @constraint:String {maxLength: 19}
    string totalCredits?;
    # Title line 2 that will appear in notice and statements
    @constraint:String {maxLength: 35}
    string accountTitle2?;
    # Contains the street name of the customer or the property
    string street?;
    # Indicates first line of the address of the BIC
    string addressLine1?;
    # Indicates second line of the address of the BIC
    @constraint:String {maxLength: 30}
    string addressLine2?;
    # Identifies the address postal code for the customer or the property
    @constraint:String {maxLength: 25}
    string postCode?;
    # Identifies the currency. E.g. USD, GBP etc
    @constraint:String {maxLength: 35}
    string currency?;
    # The identifier of the joint holder
    @constraint:String {maxLength: 350}
    string jointHolderId?;
    # The town and country associated with the address
    @constraint:String {maxLength: 35}
    string townCountry?;
    # Balance brought forward from the previous date/period
    @constraint:String {maxLength: 19}
    string openingBalance?;
    # Contains the date on which the transaction or payment gets initiated
    string startDate?;
    # Contains the total number of debits
    @constraint:String {maxLength: 19}
    string totalDebits?;
};

public type SavingsAccountBodyMinimumPayments record {
    # Specify the bill type for which minimum payment amount must be made due or capitalised
    @constraint:String {maxLength: 15}
    string minimumPaymentBillType?;
    # minimum amount that needs to be made due or capitalised for the associated bill type
    @constraint:String {maxLength: 18}
    string minimumPaymentAmount?;
    # Id of the product property
    SavingsAccountBodyProperties[] properties?;
};

public type AccountResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountResponseBodyProperties properties?;
};

public type ForwardEntriesResponseBodyInner record {
    # Indicates the extension data
    record {} extensions?;
    # Contains the identifier for the transaction in the core system
    @constraint:String {maxLength: 25}
    string transactionReference?;
    # The additional text printed on descriptive statements in addition to the standard narrative and/or reference
    @constraint:String {maxLength: 60}
    string narrative?;
    # Contains the transaction amount. This is based on the currency, either local or foreign currency
    @constraint:Number {maxValue: 16}
    decimal transactionAmount?;
    # Indicates the date on which this business activity is booked in the underlying system. The effective date and booking date could be different if systems allow forward/back dated business transactions. Dates are expected in YYYYMMDD format. If booking date is not passed, effective date would be assumed as booking date
    @constraint:String {maxLength: 11}
    string bookingDate?;
    # Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)
    @constraint:String {maxLength: 20}
    string valueDate?;
};

public type AccountsArrangementsResponseBodyArrangementActivity record {
    # Indicates an unique identifier of an account
    @constraint:String {maxLength: 20}
    string arrangementId?;
    # Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant
    @constraint:String {maxLength: 4}
    string lineOfBusiness?;
    # Contains the reason for performing the current activity
    @constraint:String {maxLength: 100}
    string reason?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account
    @constraint:String {maxLength: 30}
    string productId?;
    # Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant
    @constraint:String {maxLength: 30}
    string channel?;
    # The override message is captured  that was generated at the time of commitment of the transaction to the database
    PayoffSavingsAccountsBodyOverrides[] overrides?;
    # Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant
    @constraint:String {maxLength: 16}
    string branch?;
    # The unique identifier to specify an arrangement reference which is act as a Master for the arrangement being created
    @constraint:String {maxLength: 20}
    string masterArrangementId?;
    # Id of the activity, e.g. ACCOUNTS-CAPITALISE-ACCHARGE*CARDISSUEFEE
    @constraint:String {maxLength: 80}
    string activityId?;
    # Indicates the runner Reference ID for simulation activity
    @constraint:String {maxLength: 30}
    string simulationRunReference?;
    # Indicates the extensions
    record {} extensions?;
    # Contains the transaction amount. This is based on the currency, either local or foreign currency
    @constraint:Number {minValue: 0, maxValue: 19}
    decimal transactionAmount?;
    # Name of the role or sub contract that is displayed, for eg: Payments Inputter, Administrator, Clerk and etc
    @constraint:String {maxLength: 35}
    string roleName?;
    # Identifier of the customer
    PayoffSavingsAccountsBodyCustomerIds[] customerIds?;
    # Identifier of the currency. This is the 3-letter ISO 4217 code of the currency
    @constraint:String {maxLength: 3}
    string currencyId?;
    # Id of the product property
    PayoffSavingsAccountsBodyProperties[] properties?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    string effectiveDate?;
};

public type AccountInterestConditionsResponseBody record {
    AccountInterestConditionsResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountInterestConditionsResponseBodyProperties properties?;
};

# AccountDetailsResponse
public type AccountDetailsResponse record {
    QueryHeader header?;
    AccountDetailsResponseBody body?;
};

public type AccountProductResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountProductResponseBodyProperties properties?;
};

public type AccountWithdrawalNoticeResponse1Body record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountWithdrawalNoticeResponseBodyProperties properties?;
};

# Represents the Headers record for the operation: reverseAccounts
public type ReverseAccountsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountScheduleResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountScheduleResponseBodyProperties properties?;
};

public type SavingsAccountBodyAccountTitles2 record {
    # Title line 2 that will appear in notice and statements
    @constraint:String {maxLength: 70}
    string accountTitle2?;
};

public type AccountfacilitiesResponse1BodyInner record {
    # Indicates an unique identifier of an account
    @constraint:String {maxLength: 30}
    string arrangementId?;
    # Indicates the extension data
    record {} extensions?;
    AccountfacilitiesResponse1BodyInner_facility[] facility?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    @constraint:String {maxLength: 30}
    string effectiveDate?;
};

public type AccountConditionsResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance noticefee?;
    SavingsAccountResponseBodyPropertiesInheritance periodiccharges?;
    SavingsAccountResponseBodyPropertiesInheritance bonus?;
    SavingsAccountResponseBodyPropertiesCrinterest crinterest?;
    SavingsAccountResponseBodyPropertiesInheritance xisa?;
    SavingsAccountResponseBodyPropertiesInheritance arrangementRules?;
    SavingsAccountResponseBodyPropertiesInheritance xisPoolid?;
    SavingsAccountResponseBodyPropertiesInheritance payfees?;
    SavingsAccountResponseBodyPropertiesSettlement settlement?;
    AccountSimulationResponseBodyPropertiesBalance balance?;
    SavingsAccountResponseBodyPropertiesInheritance activityCharges?;
    SavingsAccountResponseBodyPropertiesInheritance nsfreversalfees?;
    SavingsAccountResponseBodyPropertiesInheritance dormancy?;
    SavingsAccountResponseBodyPropertiesLimit 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance xira?;
    SavingsAccountResponseBodyPropertiesStatement statement?;
    SavingsAccountResponseBodyPropertiesInheritance dormancyfee?;
    SavingsAccountResponseBodyPropertiesInheritance closurefee?;
    SavingsAccountResponseBodyPropertiesInheritance minbalfee?;
    SavingsAccountResponseBodyPropertiesInheritance txnfee?;
    SavingsAccountResponseBodyPropertiesInheritance balanceMaintenance?;
    SavingsAccountResponseBodyPropertiesInheritance officers?;
    SavingsAccountResponseBodyPropertiesInheritance returnfees?;
    SavingsAccountResponseBodyPropertiesInheritance forcecapitalise?;
    SavingsAccountResponseBodyPropertiesInheritance xrateSetup?;
    SavingsAccountResponseBodyPropertiesInheritance renewal?;
    SavingsAccountResponseBodyPropertiesInheritance mgmtfee?;
    SavingsAccountResponseBodyPropertiesInheritance productQualifierNotice?;
    SavingsAccountResponseBodyPropertiesInheritance limitfees?;
    SavingsAccountResponseBodyPropertiesInheritance payoff?;
    SavingsAccountResponseBodyPropertiesInheritance tax?;
    SavingsAccountResponseBodyPropertiesInheritance messaging?;
    SavingsAccountResponseBodyPropertiesInheritance cashback?;
    SavingsAccountResponseBodyPropertiesSchedule schedule?;
    SavingsAccountResponseBodyPropertiesInheritance prefpricing?;
    SavingsAccountResponseBodyPropertiesInheritance cardissuefee?;
    SavingsAccountResponseBodyPropertiesInheritance xtxlimit?;
    SavingsAccountResponseBodyPropertiesInheritance constraint?;
    SavingsAccountResponseBodyPropertiesInheritance facility?;
    SavingsAccountResponseBodyPropertiesCustomer customer?;
};

public type AccountStatementResponse1Body record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountStatementResponse1BodyProperties properties?;
};

public type SavingsAccountBodyPostingRestrictions record {
    # This indicates the  date  on which the offer or privilege terminates for the event
    @constraint:String {maxLength: 11}
    string expiryDate?;
    SavingsAccountBodyRestrictionTexts[] restrictionTexts?;
    # Identifies any restrictions for posting entries that are to be imposed on the Account
    @constraint:String {maxLength: 4}
    string postingRestriction?;
    # Reason for unblocking the restriction set on an account
    SavingsAccountBodyUnrestrictionTexts[] unrestrictionTexts?;
    # Sets restrictions on the actions that can be performed on an account. Allowed values can be retrieved through method getEbLookup, virtualTableName BLOCK.REASON.CODES. 
    @constraint:String {maxLength: 35}
    string restrictionReason?;
    # Contains the date on which the transaction or payment gets initiated
    @constraint:String {maxLength: 11}
    string startDate?;
    # Captures the code that removes the restriction set on an account.  Allowed values can be retrieved through method getEbLookup, virtualTableName UNBLOCK.REASON.CODES
    @constraint:String {maxLength: 35}
    string unrestrictionReason?;
};

public type SavingsAccountBodyInterestStatement record {
    # Short title for the Account to be created
    @constraint:String {maxLength: 19}
    string name?;
    # Contains the details of account statement first cycle. It includes addon, participant account, lead account, print type, print attribute name, print attribute value, etc
    SavingsAccountBodyStatement1[] statement?;
};

# Represents the Headers record for the operation: initiateAccountPayin
public type InitiateAccountPayinHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyAgentCustomerIds record {
    # The id of the 3rd party who sold the product on behalf of the institution
    @constraint:String {maxLength: 10}
    string agentCustomerId?;
};

public type SavingsAccountBodyBalance record {
    # An Alternate Identification for the Deal. This can be used to retrieve the Deal for amendment
    SavingsAccountBodyAlternateIds[] alternateIds?;
    # Identifier of the account in source system, eg, a origination system
    @constraint:String {maxLength: 35}
    string originationReference?;
    # Defines if anniversaryDate or start date is based on account creation or once disbursement is done. Allowed values are ARRANGEMENT and DISBURSEMENT. ARRANGEMENT indicates that account start period is considered as arrangement creation time. If set as DISBURSEMENT the account start period is based on disbursement activity date
    @constraint:String {maxLength: 10}
    string baseDateType?;
    # Identifies any restrictions for posting entries that are to be imposed on the Account
    SavingsAccountBodyPostingRestrictions[] postingRestrictions?;
    # Specifies the additional officers who can assist with a product/arrangement
    SavingsAccountBodyOtherOfficers[] otherOfficers?;
    # Indicates the accounting company of the account record
    @constraint:String {maxLength: 11}
    string accountingCompany?;
    # Indicates the number of months without customer activity before an account is declared as inactive
    @constraint:String {maxLength: 3}
    string inactiveMonths?;
    # Defines the behavior when recurring payment dates falls on a weekend or bank holiday. The payment is then executed either the 'preceding' or 'following' working day. ASPSP might reject the request due to the communicated value, if rules in Online-Banking are not supporting this execution rule
    @constraint:String {maxLength: 15}
    string dateAdjustment?;
    # Indicates the conditions under which account details or details of entries over the account are to be included in an end of day report for referral to the account officer responsible. Referral conditions can be defined depending on transaction such as transaction code, amount and sign, or the balance of the Account
    SavingsAccountBodyReferalCodes[] referalCodes?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    @constraint:String {maxLength: 35}
    string accountId?;
    # Indicates the extensions
    record {} extensions?;
    # Id of the portfolio or security account
    @constraint:String {maxLength: 35}
    string portfolioId?;
    # Indicates the option to specify the basis for deriving the future event dates.Allowed values are previous(last adjusted event date will be used for deriving) ,base(last unadjusted event date provided by user will be used for deriving and null(change product ,renewal event base date will be used for deriving)
    @constraint:String {maxLength: 10}
    string baseDateKey?;
    # Title line 2 that will appear in notice and statements
    SavingsAccountBodyAccountTitles2[] accountTitles2?;
    # Specify the primary officer responsible for the arrangement
    @constraint:String {maxLength: 4}
    string primaryOfficer?;
    # The reference which is provided to the beneficiary/ creditor by the originator of payment
    @constraint:String {maxLength: 16}
    string customerReference?;
    # Short title on an account
    SavingsAccountBodyAccountTitles[] accountTitles?;
    # The country or region code to be considered for determining the holidays and used while calculating the schedule dates
    SavingsAccountBodyBusinessDayCentres[] businessDayCentres?;
    # Shortcut code for referring an Entity/Company/Branch
    @constraint:String {maxLength: 10}
    string mnemonic?;
    # Indicates the type of Annual Percentage Rate calculation selected for Reporting. Available options such as Cashflow,Interest
    SavingsAccountBodyAprTypes[] aprTypes?;
    # Contains the short title given to the name of an account or an arrangement
    SavingsAccountBodyShortTitles[] shortTitles?;
    # Indicates how the schedule date has to be adjusted when the schedule falls on a holiday. Allowed values are BACKWARD, FORWARD, FORWARD SAME MONTH or CALENDAR
    @constraint:String {maxLength: 18}
    string dateConvention?;
    # Indicates the account or contract product name. For example for an account this maybe current, savings etc
    @constraint:String {maxLength: 5}
    string category?;
    # The start or end period defined in MMDD format to indicate the period when charge rules has to be applied
    @constraint:String {maxLength: 6}
    string anniversary?;
};

# AccountStatementResponse1
public type AccountStatementResponse1 record {
    ArrangementHeader header?;
    AccountStatementResponse1Body body?;
};

# Represents the Queries record for the operation: createMudarabaSavingAccount
public type CreateMudarabaSavingAccountQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# AccountCustomerResponse
public type AccountCustomerResponse record {
    ArrangementHeader header?;
    AccountCustomerResponseBody body?;
};

public type SavingsAccountBodyBusinessDayCentres record {
    # The country or region code to be considered for determining the holidays and used while calculating the schedule dates
    @constraint:String {maxLength: 4}
    string businessDayCentre?;
};

# Represents the Queries record for the operation: createBusinessAccount
public type CreateBusinessAccountQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Headers record for the operation: getPastStatements
public type GetPastStatementsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type ForwardEntriesResponseQueryHeader record {
    ForwardEntriesResponseQueryHeaderData data?;
    ArrangementHeaderAudit audit?;
    # The record from which the response should be displayed
    @jsondata:Name {value: "page_start"}
    int:Signed32 pageStart?;
    # The total number of records present
    @jsondata:Name {value: "total_size"}
    int:Signed32 totalSize?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @jsondata:Name {value: "page_token"}
    string pageToken?;
    # Status of the API(success/failed)
    string status?;
    # The total number of records per page
    @jsondata:Name {value: "page_size"}
    int:Signed32 pageSize?;
};

# CurrentAccountsResponse
public type CurrentAccountsResponse record {
    ArrangementHeader header?;
    CurrentAccountsResponseBody body?;
};

public type SavingsAccountBodyRepayment record {
    # Indicates the transaction reference for which the history of transactions is requested. It is steered by the attribute 'booked' given the start date and end date or the entry from which the history is requested
    SavingsAccountBodyReference[] reference?;
    # Contains the transaction type used for settlement of the bills due
    @constraint:String {maxLength: 55}
    string payInSettlementActivity?;
    # Contains the rule on which the system should utilise the funds available in the pay in account during the settlement process. Options are Full, Partial and None
    @constraint:String {maxLength: 35}
    string payInRule?;
    # Contains the transaction recycling rules which define the set of retry conditions
    @constraint:String {maxLength: 35}
    string payInRCCondition?;
    # Contains the transaction type used by the transaction recycler for retrying the debits
    @constraint:String {maxLength: 35}
    string payInRCType?;
    # Indicates if the payment is Customer (C) type or Bank (B) type
    SavingsAccountBodyPaymentTypes[] paymentTypes?;
    # Flag to indicate whether Payin Settlement instruction is required or not.Valid input is Yes or No.Default value is Yes
    @constraint:String {maxLength: 3}
    string payInSettlement?;
};

public type AccountDebitResponseBody record {
    PayoffSavingsAccountsResponse1BodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

public type SavingsAccountBodyMargins record {
    # This is the rate applied over the default interest rate or commission rate to achieve the actual rate
    @constraint:String {maxLength: 12}
    string marginRate?;
    # Indicates whether the margin is positive or negaitve, when margin percentage is applied on the market rate while calculating the fair value. Possible values include + or -
    @constraint:String {maxLength: 9}
    string marginOperand?;
    # Defines whether there are single or multiple margins to be considered while arriving at the applicable interest rate  Allowed values:  null (default): multiple margins may be defined SINGLE: only a single margin is allowed
    @constraint:String {maxLength: 15}
    string marginType?;
};

public type CorporateAccountResponseBodyArrangementActivity record {
    # Contains the reason for performing the current activity
    @constraint:String {maxLength: 100}
    string reason?;
    # Indicates an unique identifier of an account
    @constraint:String {maxLength: 20}
    string arrangmentId?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account
    @constraint:String {maxLength: 30}
    string productId?;
    # If the account has an associated pricing arrangement, the way the pricing is applied is indicated from standard set of values - automatic, manual or No Pricing
    @constraint:String {maxLength: 35}
    string pricingSelection?;
    # Indicates the Rewards account id assigned to a financial account(Loans,Deposits)
    @constraint:String {maxLength: 17}
    string rewardsArrangementId?;
    # Standard date field which records trade date of the account
    @constraint:String {maxLength: 11}
    string tradeDate?;
    # Contains the identifier used for the role played by the party or customer in the contract or account
    SavingsAccountBodyPartyRoles[] partyRoles?;
    # The id of the arrangement with the 3rd party that has sold the product on behalf of the institution
    SavingsAccountBodyAgentArrangementIds[] agentArrangementIds?;
    # It is a date on/upon which an account is considered to take effect
    @constraint:String {maxLength: 11}
    string arrangementEffectiveDate?;
    # Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field
    SavingsAccountBodyPartyIds[] partyIds?;
    # Id of the activity, e.g. ACCOUNTS-CAPITALISE-ACCHARGE*CARDISSUEFEE
    @constraint:String {maxLength: 80}
    string activityId?;
    # The role of the 3rd party, select from standard list
    SavingsAccountBodyAgentRoles[] agentRoles?;
    # Indicates the Pricing Plan of an account, it gives preferential interest rate/charge schedule based on customer segment
    @constraint:String {maxLength: 35}
    string pricingPlan?;
    # Indicates the extensions
    record {} extensions?;
    # The id of the 3rd party who sold the product on behalf of the institution
    SavingsAccountBodyAgentCustomerIds[] agentCustomerIds?;
    # Identifies the currency. E.g. USD, GBP etc
    @constraint:String {maxLength: 3}
    string currency?;
    # It defines the type of a customer based on criteria defined by Bank, Eg: Gold Customer, Mobile Banking Customer
    @constraint:String {maxLength: 15}
    string productVariation?;
};

public type BusinessAccountResponseBody record {
    AccountsArrangementsResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    BusinessAccountResponseBodyProperties properties?;
};

# Represents the Queries record for the operation: getAccountfacilities
public type GetAccountfacilitiesQueries record {
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

public type AccountChannelResponseBody record {
    AccountInterestConditionsResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

public type AccountPayoffAutoSimulationResponseBody record {
    PayoffSavingsAccountsResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountPayoffAutoSimulationResponseBodyProperties properties?;
};

# Represents the Headers record for the operation: updateAccountCredit
public type UpdateAccountCreditHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type PayoffSavingsAccountsResponseBody record {
    PayoffSavingsAccountsResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    PayoffSavingsAccountsResponseBodyProperties properties?;
};

public type SavingsAccountResponseBodyPropertiesCrinterest record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    SavingsAccountBodyCrinterest body?;
};

public type AccountDormancyDetailsResponseBody AccountDormancyDetailsResponseBodyInner[];

# Represents the Queries record for the operation: initiateAccountMigration
public type InitiateAccountMigrationQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type AccountResponseBodyPropertiesBalance record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    AccountBodyBalance body?;
};

# SavingsAccountResponse
public type SavingsAccountResponse record {
    ArrangementHeader header?;
    SavingsAccountResponseBody body?;
};

# Represents the Queries record for the operation: getAccountInfo
public type GetAccountInfoQueries record {
    # Indicates an unique identifier of an account
    string arrangementId?;
    # The identifier of the underlying Entity/Company/Branch
    string companyCode?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    string accountId?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account
    string productId?;
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # Identifies the currency. E.g. USD, GBP etc
    string currency?;
    # Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed
    string customer?;
    # Specifies the status of the agreement with following options, UNAUTH - input but not authorised, AUTH - authorised and LIVE, CURRENT - disbursement initiated, EXPIRED - past final payment date with pending dues, REVERSED - reversed, CLOSE - closed, PENDING.CLOSURE - ready for closure
    string status?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

# Represents the Queries record for the operation: updateAccountDebit
public type UpdateAccountDebitQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type MudarabaSavingAccountResponseBody record {
    CorporateAccountResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    MudarabaSavingAccountResponseBodyProperties properties?;
};

public type AccountWithdrawalNoticeResponse2Body record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountWithdrawalNoticeResponseBodyProperties properties?;
};

public type AccountBalanceMigrationResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountBalanceMigrationResponseBodyProperties properties?;
};

# Represents the Queries record for the operation: getAccountDetails
public type GetAccountDetailsQueries record {
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

public type SavingsAccountBodyReference1 record {
    # Contains the transaction type used to credit the customer account for settlement of the payables 
    @constraint:String {maxLength: 55}
    string payOutActivity?;
    # The account to which a settlement amount is transferred
    @constraint:String {maxLength: 90}
    string payOutAccount?;
    # The beneficiary that payment should be made to 
    @constraint:String {maxLength: 17}
    string payOutBeneficiary?;
    # Contains the percentage of the payment amount used for settlement of the payables
    @constraint:String {maxLength: 35}
    string payOutPercentage?;
    # Contains the payout payment order product for which payment is initiated
    @constraint:String {maxLength: 35}
    string payOutPoProduct?;
    # Contains the finite amount of the payment used for settlement of the payables
    @constraint:String {maxLength: 35}
    string payOutAmount?;
};

public type AccountSimulationResponseBodyPropertiesBalance record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    AccountSimulationBodyBalance body?;
};

public type AccountBalanceMigrationBodyAdjustProperties record {
    # Indicates the interest or account or charge properties for which balances are to be captured or adjusted
    @constraint:String {maxLength: 15}
    string adjustProperty?;
    #  Indicates the balance type which is corresponding to the captured or adjusted property. It should be non-bill related balance type that are not currently linked to the arrangement. For example, balance types are CURACCOUNT, ACCPRINCIPALINT, AVLACCOUNT, etc
    AccountBalanceMigrationBodyAdjustBalanceTypes[] adjustBalanceTypes?;
};

# PayoffCurrentAccountsResponse1
public type PayoffCurrentAccountsResponse1 record {
    ArrangementHeader header?;
    PayoffCurrentAccountsResponse1Body body?;
};

# AccountScheduleResponse
public type AccountScheduleResponse record {
    ArrangementHeader header?;
    AccountScheduleResponseBody body?;
};

# Represents the Headers record for the operation: getAccountDetails
public type GetAccountDetailsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountMigrationResponseBodyArrangementActivity record {
    # Contains the line of business in which the activity was performed. If pricing is not determined based on line of business, then this is not significant
    @constraint:String {maxLength: 4}
    string lineOfBusiness?;
    # Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field
    CurrentAccountsBodyParties[] partyIds?;
    # Indicates the original contract date of the arrangement which was migrated from the legacy system
    string originalContractDate?;
    # Indicates the extensions
    record {} extensions?;
    # Identifier of the account in source system, eg, a origination system
    AccountMigrationBodyOriginationReference[] originationReference?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account
    @constraint:String {maxLength: 30}
    string productId?;
    # Contains the channel in which the activity was performed. If pricing is not determined based on channel, then this is not significant
    @constraint:String {maxLength: 30}
    string channel?;
    # Identifies the currency. E.g. USD, GBP etc
    @constraint:String {maxLength: 3}
    string currency?;
    # Contains the branch name/code in which the business activity was performed. If pricing is not determined based on branch, then this is not significant
    @constraint:String {maxLength: 16}
    string branch?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    string effectiveDate?;
};

public type AccountProductBodyAccountTypes record {
    # Groups the products based on their type, eg, Checking, Savings, CD etc,
    @constraint:String {maxLength: 70}
    string accountType?;
};

public type SavingsAccountResponseBodyPropertiesLimitHeaderAudit record {
    # Time taken to response by Transact
    @jsondata:Name {value: "T24_time"}
    int:Signed32 t24Time?;
    # Time taken to parse the response by IRIS
    @jsondata:Name {value: "responseParse_time"}
    decimal responseParseTime?;
    # Current number of the record
    string versionNumber?;
    # Time taken to parse the request by IRIS
    @jsondata:Name {value: "requestParse_time"}
    decimal requestParseTime?;
};

public type AccountDetailsResponseBodyInner_charges record {
    # The frequency at which a payment is required to be generated
    string paymentFrequency?;
    # Indicates Payment type set to an account
    string paymentTypeName?;
    # Indicates the  property description to which benefit has been applied
    string propertyName?;
    # Method chosen to make the payment
    string paymentMethod?;
    # Indicates the payment frequency associated with the charge
    string chargeSchedulePaymentValue?;
};

public type CorporateAccountResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance inhcommitment?;
    SavingsAccountResponseBodyPropertiesInheritance infdrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance servicefee?;
    SavingsAccountResponseBodyPropertiesInheritance periodiccharges?;
    SavingsAccountResponseBodyPropertiesInheritance bonus?;
    SavingsAccountResponseBodyPropertiesInheritance ovdlimitfees?;
    SavingsAccountResponseBodyPropertiesInheritance inhpenalint?;
    SavingsAccountResponseBodyPropertiesInheritance drinterest?;
    SavingsAccountResponseBodyPropertiesInheritance noofcredits?;
    SavingsAccountResponseBodyPropertiesInheritance odnotification?;
    CorporateAccountResponseBodyPropertiesBalance balance?;
    SavingsAccountResponseBodyPropertiesInheritance nsfreversalfees?;
    SavingsAccountResponseBodyPropertiesInheritance bundledrinterst?;
    SavingsAccountResponseBodyPropertiesInheritance utllimitfees?;
    SavingsAccountResponseBodyPropertiesInheritance dormancy?;
    SavingsAccountResponseBodyPropertiesInheritance 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance rewardsPoints?;
    SavingsAccountResponseBodyPropertiesInheritance closurefee?;
    SavingsAccountResponseBodyPropertiesInheritance minbalfee?;
    SavingsAccountResponseBodyPropertiesInheritance officers?;
    SavingsAccountResponseBodyPropertiesInheritance atmdebitfee?;
    SavingsAccountResponseBodyPropertiesInheritance atmposfee?;
    SavingsAccountResponseBodyPropertiesInheritance withdrawalfee?;
    SavingsAccountResponseBodyPropertiesInheritance xrateSetup?;
    SavingsAccountResponseBodyPropertiesInheritance subscriptionfee?;
    SavingsAccountResponseBodyPropertiesInheritance noofdebits?;
    SavingsAccountResponseBodyPropertiesInheritance mgmtfee?;
    SavingsAccountResponseBodyPropertiesInheritance inheritanceTarget?;
    SavingsAccountResponseBodyPropertiesInheritance tax?;
    SavingsAccountResponseBodyPropertiesInheritance infcrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance messaging?;
    SavingsAccountResponseBodyPropertiesInheritance internalintcr2?;
    SavingsAccountResponseBodyPropertiesInheritance alerts?;
    SavingsAccountResponseBodyPropertiesInheritance packagefee?;
    SavingsAccountResponseBodyPropertiesInheritance turnoverdebit?;
    SavingsAccountResponseBodyPropertiesInheritance bundleinterest?;
    SavingsAccountResponseBodyPropertiesInheritance overdraft?;
    SavingsAccountResponseBodyPropertiesInheritance crinterest?;
    SavingsAccountResponseBodyPropertiesInheritance xisa?;
    SavingsAccountResponseBodyPropertiesInheritance commitmentfee?;
    SavingsAccountResponseBodyPropertiesInheritance arrangementRules?;
    SavingsAccountResponseBodyPropertiesInheritance xisPoolid?;
    SavingsAccountResponseBodyPropertiesInheritance wirefee?;
    SavingsAccountResponseBodyPropertiesInheritance chequewd?;
    SavingsAccountResponseBodyPropertiesInheritance internalintdr?;
    SavingsAccountResponseBodyPropertiesInheritance payfees?;
    SavingsAccountResponseBodyPropertiesInheritance settlement?;
    SavingsAccountResponseBodyPropertiesInheritance activityCharges?;
    SavingsAccountResponseBodyPropertiesInheritance xira?;
    SavingsAccountResponseBodyPropertiesInheritance bundlecrinterst?;
    SavingsAccountResponseBodyPropertiesInheritance statement?;
    SavingsAccountResponseBodyPropertiesInheritance dormancyfee?;
    SavingsAccountResponseBodyPropertiesInheritance agentCommission?;
    SavingsAccountResponseBodyPropertiesInheritance reporting?;
    SavingsAccountResponseBodyPropertiesInheritance balanceAvailability?;
    SavingsAccountResponseBodyPropertiesInheritance returnfees?;
    SavingsAccountResponseBodyPropertiesInheritance accharge?;
    SavingsAccountResponseBodyPropertiesInheritance renewal?;
    SavingsAccountResponseBodyPropertiesInheritance inhcrinterest?;
    SavingsAccountResponseBodyPropertiesInheritance limitfees?;
    SavingsAccountResponseBodyPropertiesInheritance payoff?;
    SavingsAccountResponseBodyPropertiesInheritance internalintcr?;
    SavingsAccountResponseBodyPropertiesInheritance adminfee?;
    SavingsAccountResponseBodyPropertiesInheritance inheritanceSource?;
    SavingsAccountResponseBodyPropertiesInheritance achcreditfee?;
    SavingsAccountResponseBodyPropertiesInheritance internalintdr2?;
    SavingsAccountResponseBodyPropertiesInheritance turnovercredit?;
    SavingsAccountResponseBodyPropertiesInheritance cashback?;
    SavingsAccountResponseBodyPropertiesInheritance highestdebit?;
    SavingsAccountResponseBodyPropertiesInheritance schedule?;
    SavingsAccountResponseBodyPropertiesInheritance prefpricing?;
    SavingsAccountResponseBodyPropertiesInheritance cardissuefee?;
    SavingsAccountResponseBodyPropertiesInheritance inhSchedule?;
    SavingsAccountResponseBodyPropertiesInheritance investcredit?;
    SavingsAccountResponseBodyPropertiesInheritance xtxlimit?;
    SavingsAccountResponseBodyPropertiesInheritance setupfee?;
    SavingsAccountResponseBodyPropertiesInheritance constraint?;
    SavingsAccountResponseBodyPropertiesInheritance penalint?;
    SavingsAccountResponseBodyPropertiesInheritance facility?;
    SavingsAccountResponseBodyPropertiesInheritance achdebitfee?;
    SavingsAccountResponseBodyPropertiesInheritance customer?;
    SavingsAccountResponseBodyPropertiesInheritance inhdrinterest?;
};

public type ForwardEntriesResponseBody ForwardEntriesResponseBodyInner[];

# Represents the Headers record for the operation: updateAccountfacilities
public type UpdateAccountfacilitiesHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountCustomerResponseBodyArrangementActivity record {
    # Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field
    CurrentAccountsBodyParties[] partyIds?;
    # Indicates the extensions
    record {} extensions?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    string effectiveDate?;
};

# Represents the Headers record for the operation: initiateAccountMigration
public type InitiateAccountMigrationHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountStatementResponseQueryHeader record {
    AccountStatementResponseQueryHeaderData data?;
    ArrangementHeaderAudit audit?;
    # The record from which the response should be displayed
    @jsondata:Name {value: "page_start"}
    int:Signed32 pageStart?;
    # The total number of records present
    @jsondata:Name {value: "total_size"}
    int:Signed32 totalSize?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @jsondata:Name {value: "page_token"}
    string pageToken?;
    # Status of the API(success/failed)
    string status?;
    # The total number of records per page
    @jsondata:Name {value: "page_size"}
    int:Signed32 pageSize?;
};

# Represents the Queries record for the operation: updateAccountProduct
public type UpdateAccountProductQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# PastStatementsResponse
public type PastStatementsResponse record {
    QueryHeader header?;
    PastStatementsResponseBody body?;
};

public type MudarabaSavingAccountResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance crprofit?;
    SavingsAccountResponseBodyPropertiesInheritance xisa?;
    SavingsAccountResponseBodyPropertiesInheritance arrangementRules?;
    SavingsAccountResponseBodyPropertiesInheritance inheritance?;
    SavingsAccountResponseBodyPropertiesInheritance settlement?;
    CorporateAccountResponseBodyPropertiesBalance balance?;
    SavingsAccountResponseBodyPropertiesInheritance activityCharges?;
    SavingsAccountResponseBodyPropertiesInheritance dormancy?;
    SavingsAccountResponseBodyPropertiesInheritance 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance statement?;
    SavingsAccountResponseBodyPropertiesInheritance xira?;
    SavingsAccountResponseBodyPropertiesInheritance dormancyfee?;
    SavingsAccountResponseBodyPropertiesInheritance agentCommission?;
    SavingsAccountResponseBodyPropertiesInheritance closurefee?;
    SavingsAccountResponseBodyPropertiesInheritance reporting?;
    SavingsAccountResponseBodyPropertiesInheritance periodicCharges?;
    SavingsAccountResponseBodyPropertiesInheritance balanceAvailability?;
    SavingsAccountResponseBodyPropertiesInheritance officers?;
    SavingsAccountResponseBodyPropertiesInheritance xrateSetup?;
    SavingsAccountResponseBodyPropertiesInheritance renewal?;
    SavingsAccountResponseBodyPropertiesInheritance pdsprofit?;
    SavingsAccountResponseBodyPropertiesInheritance payoff?;
    SavingsAccountResponseBodyPropertiesInheritance tax?;
    SavingsAccountResponseBodyPropertiesInheritance messaging?;
    SavingsAccountResponseBodyPropertiesInheritance alerts?;
    SavingsAccountResponseBodyPropertiesInheritance crprofithiba?;
    SavingsAccountResponseBodyPropertiesInheritance schedule?;
    SavingsAccountResponseBodyPropertiesInheritance xtxlimit?;
    SavingsAccountResponseBodyPropertiesInheritance poolId?;
    SavingsAccountResponseBodyPropertiesInheritance constraint?;
    SavingsAccountResponseBodyPropertiesInheritance pricingRules?;
    SavingsAccountResponseBodyPropertiesInheritance facility?;
    SavingsAccountResponseBodyPropertiesInheritance customer?;
};

public type PayoffSavingsAccountsResponse1Body record {
    PayoffSavingsAccountsResponse1BodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    PayoffSavingsAccountsResponse1BodyProperties properties?;
};

# Represents the Queries record for the operation: createAccountsArrangements
public type CreateAccountsArrangementsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type ForwardEntriesResponseQueryHeaderData record {
    # Closing balance of the arrangement
    string closingBalance?;
    # Balance brought forward from the previous date/period
    string openingBalance?;
};

# AccountWithdrawalNoticeResponse1
public type AccountWithdrawalNoticeResponse1 record {
    ArrangementHeader header?;
    AccountWithdrawalNoticeResponse1Body body?;
};

# AccountWithdrawalNoticeResponse2
public type AccountWithdrawalNoticeResponse2 record {
    ArrangementHeader header?;
    AccountWithdrawalNoticeResponse2Body body?;
};

# AccountfacilitiesResponse
public type AccountfacilitiesResponse record {
    ArrangementHeader header?;
    AccountfacilitiesResponseBody body?;
};

public type AccountPayoffAutoSimulationResponseBodyProperties record {
    AccountPayoffAutoSimulationResponseBodyPropertiesPayoff payoff?;
    AccountPayoffAutoSimulationResponseBodyPropertiesSettlement settlement?;
};

# AccountProductResponse
public type AccountProductResponse record {
    ArrangementHeader header?;
    AccountProductResponseBody body?;
};

# Represents the Headers record for the operation: createMudarabaSavingAccount
public type CreateMudarabaSavingAccountHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountSimulationBodyShortTitles record {
    # Contains the short title given to the name of an account or an arrangement
    @constraint:String {maxLength: 70}
    string shortTitle?;
};

# Represents the Headers record for the operation: updateAccountDormancyReactivation
public type UpdateAccountDormancyReactivationHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Headers record for the operation: createAccountPayoffAutoSimulation
public type CreateAccountPayoffAutoSimulationHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountSimulationResponse1Body record {
    PayoffSavingsAccountsResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

public type AccountInterestConditionsResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesCrinterest crinterest?;
};

public type SavingsAccountBodyAccountTitles record {
    # Short title on an account
    @constraint:String {maxLength: 70}
    string accountTitle?;
};

public type SavingsAccountBodyAlternateIds record {
    # An Alternate Identification for the Deal. This can be used to retrieve the Deal for amendment
    @constraint:String {maxLength: 36}
    string alternateId?;
    # Contains the alternate account system identifier used for defining the alternate account Id
    @constraint:String {maxLength: 10}
    string alternateIdType?;
};

# Represents the Queries record for the operation: cancelAccountWithdrawalNotice
public type CancelAccountWithdrawalNoticeQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Queries record for the operation: createAccountWithdrawalNotice
public type CreateAccountWithdrawalNoticeQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Headers record for the operation: getForwardEntries
public type GetForwardEntriesHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyOffset record {
    # Indicates the offset payment rule activity that defines the list of due balances which need to be offset using the pay balance. For example, ACCOUNTS-OFFSET-REPAYRULE1, ACCOUNTS-OFFSET-REPAYRULE2, etc
    @constraint:String {maxLength: 55}
    string offsetPayInActivity?;
    # Indicates the offset payout rule activity which defines the list of pay balances which need to be debited to offset due balance created. For example, ACCOUNTS-OFFSET-PAYOUTRULE, ACCOUNTS-OFFSET-PAYOUTRULE2, etc
    @constraint:String {maxLength: 55}
    string offsetPayOutActivity?;
    # Indicates if the settlement offset is required
    @constraint:String {maxLength: 3}
    string offsetRequired?;
    # Indicates the property which needs to be used for settlement offset
    SavingsAccountBodyOffsetProperties[] offsetProperties?;
};

# Represents the Queries record for the operation: reverseAccounts
public type ReverseAccountsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Headers record for the operation: getAccountfacilities
public type GetAccountfacilitiesHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyCustomer record {
    # Indicates the extensions
    record {} extensions?;
    # Contains the customer identifier to fetch list of consent arrangements for the customer or customer identifier of the debtor account. This will be populated once the SCA(Strong Customer Authentication) is completed
    SavingsAccountBodyCustomers[] customers?;
    # Identifies if there is a joint liability on the limit record Allowed values: -YES -NO  
    @constraint:String {maxLength: 1}
    string jointLiability?;
};

public type AccountBalanceMigrationBodyAdjustBalanceTypes record {
    # Indicates the removal of an asset from the balance sheet due to impairment, obsolescence, or other factors
    @constraint:String {maxLength: 15}
    string writeOff?;
    # Indicates that the corresponding balance needs to be written off partially. It should not be greater than the original balance amount
    @constraint:String {maxLength: 19}
    string writeOffAmount?;
    # Indicates the adjusted balance amount for the corresponding balance type. This is a signed field, sign used to indicate the debit or credit entry to be passed based on the balance type and the product line of the product
    @constraint:String {maxLength: 19}
    string adjustBalanceAmount?;
    # Indicates the new balance amount for the corresponding balance type while capturing a new balance type or adjusting an existing balance type. This is a signed field. For write off activities, system will default this field to zero
    @constraint:String {maxLength: 19}
    string newBalanceAmount?;
    #  Indicates the balance type which is corresponding to the captured or adjusted property. It should be non-bill related balance type that are not currently linked to the arrangement. For example, balance types are CURACCOUNT, ACCPRINCIPALINT, AVLACCOUNT, etc
    @constraint:String {maxLength: 22}
    string adjustBalanceType?;
    # Indicates the original balance amount for the each of the given balance type
    @constraint:String {maxLength: 19}
    string originalBalanceAmount?;
};

# Represents the Queries record for the operation: updatePayoffSavingsAccounts
public type UpdatePayoffSavingsAccountsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type SavingsAccountBodyAprTypes record {
    # Indicates the type of Annual Percentage Rate calculation selected for Reporting. Available options such as Cashflow,Interest
    @constraint:String {maxLength: 30}
    string aprType?;
    # Indicates the Annual Percentage Rate  calculated for the specified annual percenatage rate type
    @constraint:String {maxLength: 35}
    string aprRate?;
};

# Represents the Queries record for the operation: initiateAccountPayout
public type InitiateAccountPayoutQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type SavingsAccountResponseBodyPropertiesLimit record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    SavingsAccountBodyLimit body?;
};

# Represents the Queries record for the operation: calculatePayoffSavingsAccounts
public type CalculatePayoffSavingsAccountsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# AccountCreditResponse
public type AccountCreditResponse record {
    ArrangementHeader header?;
    AccountCreditResponseBody body?;
};

public type CurrentAccountsBodyBalance record {
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    @constraint:String {maxLength: 35}
    string accountId?;
    # Indicates the extensions
    record {} extensions?;
    # An Alternate Identification for the Deal. This can be used to retrieve the Deal for amendment
    SavingsAccountBodyAlternateIds[] alternateIds?;
    # Id of the portfolio or security account
    @constraint:String {maxLength: 35}
    string portfolioId?;
    # Display name or short name of the account specified
    @constraint:String {maxLength: 70}
    string accountName?;
    # Groups the products based on their type, eg, Checking, Savings, CD etc,
    @constraint:String {maxLength: 70}
    string accountType?;
    # The reference which is provided to the beneficiary/ creditor by the originator of payment
    @constraint:String {maxLength: 16}
    string customerReference?;
    # The start or end period defined in MMDD format to indicate the period when charge rules has to be applied
    @constraint:String {maxLength: 6}
    string anniversary?;
};

public type AccountConditionsResponseBody record {
    AccountProductResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    AccountConditionsResponseBodyProperties properties?;
};

public type SavingsAccountBodySwift record {
    # Defines the SWIFT message type for the cycle 1 statement
    @constraint:String {maxLength: 10}
    string swiftStatementType?;
};

public type SavingsAccountResponseBodyArrangementActivity record {
    # Indicates an unique identifier of an account
    @constraint:String {maxLength: 20}
    string arrangementId?;
    # Contains the reason for performing the current activity
    @constraint:String {maxLength: 100}
    string reason?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account
    @constraint:String {maxLength: 30}
    string productId?;
    # If the account has an associated pricing arrangement, the way the pricing is applied is indicated from standard set of values - automatic, manual or No Pricing
    @constraint:String {maxLength: 35}
    string pricingSelection?;
    # Indicates the Rewards account id assigned to a financial account(Loans,Deposits)
    @constraint:String {maxLength: 17}
    string rewardsArrangementId?;
    # Standard date field which records trade date of the account
    @constraint:String {maxLength: 11}
    string tradeDate?;
    # Contains the identifier used for the role played by the party or customer in the contract or account
    SavingsAccountBodyPartyRoles[] partyRoles?;
    # The id of the arrangement with the 3rd party that has sold the product on behalf of the institution
    SavingsAccountBodyAgentArrangementIds[] agentArrangementIds?;
    # It is a date on/upon which an account is considered to take effect
    @constraint:String {maxLength: 11}
    string arrangementEffectiveDate?;
    # Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field
    SavingsAccountBodyPartyIds[] partyIds?;
    # Id of the activity, e.g. ACCOUNTS-CAPITALISE-ACCHARGE*CARDISSUEFEE
    @constraint:String {maxLength: 80}
    string activityId?;
    # The role of the 3rd party, select from standard list
    SavingsAccountBodyAgentRoles[] agentRoles?;
    # Indicates the Pricing Plan of an account, it gives preferential interest rate/charge schedule based on customer segment
    @constraint:String {maxLength: 35}
    string pricingPlan?;
    # Indicates the extensions
    record {} extensions?;
    # The id of the 3rd party who sold the product on behalf of the institution
    SavingsAccountBodyAgentCustomerIds[] agentCustomerIds?;
    # Identifies the currency. E.g. USD, GBP etc
    @constraint:String {maxLength: 3}
    string currency?;
    # It defines the type of a customer based on criteria defined by Bank, Eg: Gold Customer, Mobile Banking Customer
    @constraint:String {maxLength: 15}
    string productVariation?;
};

# AccountSimulationResponse1
public type AccountSimulationResponse1 record {
    ArrangementHeader header?;
    AccountSimulationResponse1Body body?;
};

public type PayoffSavingsAccounts1BodyPayout record {
    # Indicates the transaction reference for which the history of transactions is requested. It is steered by the attribute 'booked' given the start date and end date or the entry from which the history is requested
    SavingsAccountBodyReference1[] reference?;
    # Contains the different payout options, for example charge, interest or principal on which the payout settlement instructions would be processed
    PayoffSavingsAccounts1BodyPayoutpropertyclasses[] payoutpropertyclasses?;
    # Flag to indicate whether Payout Settlement instruction is required or not.Valid input is Yes or No.Default value is Yes
    @constraint:String {maxLength: 3}
    string payOutSettlement?;
    # Contains the different payout options, for example management charge, principal interest or commitment on which the payout settlement instructions would be processed
    PayoffSavingsAccounts1BodyPayoutproperties[] payoutproperties?;
};

public type AccountsArrangementsResponseBody record {
    AccountsArrangementsResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

public type AccountDetailsResponseBodyInner_allowedcurrencies record {
    # Available currencies for the product
    string allowedcurrency?;
};

public type SavingsAccountBodyHolidayRestrictTypes record {
    # Indicates the type of holiday restriction which will be applied. Allowed values are PropertyClass, Property, Bill Type, Payment Type
    @constraint:String {maxLength: 35}
    string holidayRestrictType?;
    # Contains the payment reference and details for each bulk record
    SavingsAccountBodyItems[] items?;
};

# AccountConditionsResponse
public type AccountConditionsResponse record {
    ArrangementHeader header?;
    AccountConditionsResponseBody body?;
};

# Represents the Headers record for the operation: calculatePayoffSavingsAccounts
public type CalculatePayoffSavingsAccountsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountBalanceMigrationBodyBills record {
    # Contains the aggregate outstanding principal amount thereof after giving effect to any borrowings and prepayments or repayments of Committed Loans
    @constraint:String {maxLength: 19}
    string outstandingAmount?;
    # The type of payment obligation generated
    @constraint:String {maxLength: 15}
    string billType?;
    # Indicates the bill amount during the ageing status(Bill which crossed the due date)
    @constraint:String {maxLength: 19}
    string delinquentAmount?;
    # Indicates a date on which a bill has been raised
    @constraint:String {maxLength: 11}
    string billDate?;
    # Indicates whether to write off an entire bill amount. Allowed values are YES or NULL. If writeOff bill is defined as YES, it indicates that the entire bill will be written off
    @constraint:String {maxLength: 15}
    string writeOffBill?;
    # Indicates the payment amount for the defined term, amount and payment frequency. It will include principal, charge and interest
    @constraint:String {maxLength: 19}
    string paymentAmount?;
    # Indicates the outstanding bill amount after adjustment. This amount would be the sum of all the interest, account and charge property amount for all the payment types
    @constraint:String {maxLength: 19}
    string newBillAmount?;
    # Indicates if the payment is Customer (C) type or Bank (B) type
    @constraint:String {maxLength: 30}
    string paymentType?;
    # Indicates the original amount of the bill
    @constraint:String {maxLength: 19}
    string originalAmount?;
    # Indicates the bill reference or Id
    @constraint:String {maxLength: 35}
    string billId?;
    # Contains the narration which is specific to the bill adjustment
    @constraint:String {maxLength: 35}
    string billAdjustmentNarrative?;
    # Method chosen to make the payment
    @constraint:String {maxLength: 10}
    string paymentMethod?;
    # Contains the date in which the payment will be sent out. Date in the format YYYYMMDD. E.g. 20191231
    @constraint:String {maxLength: 11}
    string paymentDate?;
    # Id of the product property
    AccountBalanceMigrationBodyProperties[] properties?;
};

# Represents the Queries record for the operation: calculatePayoffCurrentAccounts
public type CalculatePayoffCurrentAccountsQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type PayoffSavingsAccountsBodyFields record {
    # The name of the field
    @constraint:String {maxLength: 35}
    string fieldName?;
    # Indicates the field value of the arrangement property
    @constraint:String {maxLength: 500}
    string fieldValue?;
};

# Provides API key configurations needed when communicating with a remote HTTP endpoint.
public type ApiKeysConfig record {|
    string apikey;
|};

public type SavingAccountResponseBody record {
    CorporateAccountResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    SavingAccountResponseBodyProperties properties?;
};

public type PayoffSavingsAccountsResponseBodyArrangementActivity record {
    # Indicates an unique identifier of an account
    @constraint:String {maxLength: 20}
    string arrangementId?;
    # Contains the reason for performing the current activity
    @constraint:String {maxLength: 100}
    string reason?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account
    @constraint:String {maxLength: 30}
    string productId?;
    # Indicates that this simulation capture is a synchronous request
    @constraint:String {maxLength: 3}
    string synchronous?;
    # The override message is captured  that was generated at the time of commitment of the transaction to the database
    PayoffSavingsAccountsBodyOverrides[] overrides?;
    # This field would be used during the Simulation scenarios. The following options are supported: 1. SIMULATE : The system would automatically trigger the Simulation the moment the simulated transaction is authorized. 2. EXECUTE : The system would automatically trigger the Execution of simulation the moment simulated transaction is authorized. It is assumed that the user would have simulated first before using this option. 3. DIRECT.EXECUTE: If the user does not want to do a two step process of simulating and executing, then this option may be utilized which does both actions in one go
    @constraint:String {maxLength: 35}
    string automaticRun?;
    # The unique identifier to specify an arrangement reference which is act as a Master for the arrangement being created
    @constraint:String {maxLength: 20}
    string masterArrangementId?;
    # Id of the activity, e.g. ACCOUNTS-CAPITALISE-ACCHARGE*CARDISSUEFEE
    @constraint:String {maxLength: 80}
    string activityId?;
    # Indicates the runner Reference ID for simulation activity
    @constraint:String {maxLength: 30}
    string simulationRunReference?;
    # Indicates the extensions
    record {} extensions?;
    # Contains the transaction amount. This is based on the currency, either local or foreign currency
    @constraint:Number {minValue: 0, maxValue: 19}
    decimal transactionAmount?;
    # Name of the role or sub contract that is displayed, for eg: Payments Inputter, Administrator, Clerk and etc
    @constraint:String {maxLength: 35}
    string roleName?;
    # Identifier of the customer
    PayoffSavingsAccountsBodyCustomerIds[] customerIds?;
    # Identifier of the currency. This is the 3-letter ISO 4217 code of the currency
    @constraint:String {maxLength: 3}
    string currencyId?;
    # Id of the product property
    PayoffSavingsAccountsBodyProperties[] properties?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    string effectiveDate?;
};

# Represents the Queries record for the operation: updateAccountAdjustment
public type UpdateAccountAdjustmentQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# PayoffSavingsAccountsResponse1
public type PayoffSavingsAccountsResponse1 record {
    ArrangementHeader header?;
    PayoffSavingsAccountsResponse1Body body?;
};

# AccountDormancyStatusResponse
public type AccountDormancyStatusResponse record {
    ArrangementHeader header?;
    AccountDormancyStatusResponseBody body?;
};

public type SavingsAccountResponseBody record {
    SavingsAccountResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    SavingsAccountResponseBodyProperties properties?;
};

# Represents the Headers record for the operation: getAccountInfo
public type GetAccountInfoHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Queries record for the operation: updateAccountCredit
public type UpdateAccountCreditQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

# Represents the Headers record for the operation: initiateAccountPayout
public type InitiateAccountPayoutHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# AccountWithdrawalNoticeResponse
public type AccountWithdrawalNoticeResponse record {
    ArrangementHeader header?;
    AccountWithdrawalNoticeResponseBody body?;
};

# Represents the Headers record for the operation: getAccountDormancyDetails
public type GetAccountDormancyDetailsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountResponseBodyPropertiesCustomer record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    SavingsAccountBodyCustomer body?;
};

# Represents the Queries record for the operation: createAccountPayoffAutoSimulation
public type CreateAccountPayoffAutoSimulationQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type SavingsAccountBodyPeriodicAttributes record {
    # Customer is eligible for requesting payment holiday upto the limit amount specified here
    @constraint:String {maxLength: 35}
    string repaymentHolidayLimit?;
    # Contains the user defined rule definition which is evaluated during the transaction based on the defined period
    @constraint:String {maxLength: 30}
    string periodicAttribute?;
};

public type SavingsAccountResponseBodyPropertiesInheritance record {
    SavingsAccountResponseBodyPropertiesInheritanceHeader header?;
};

# Represents the Headers record for the operation: createSavingAccount
public type CreateSavingAccountHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Headers record for the operation: createNonResidentAccount
public type CreateNonResidentAccountHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyPayout record {
    # Indicates the transaction reference for which the history of transactions is requested. It is steered by the attribute 'booked' given the start date and end date or the entry from which the history is requested
    SavingsAccountBodyReference1[] reference?;
    # Contains the transaction type used for settlement of the payables
    @constraint:String {maxLength: 55}
    string payOutSettlementActivity?;
    # Contains the transaction recycling rules which define the set of retry conditions for settle the credits. For example, Monthly, Weekly or Daily
    @constraint:String {maxLength: 35}
    string payOutRCCondition?;
    # Contains the transaction type used by the transaction recycler to settle the bills particularly for retrying the credits. For example, values are AA, ACFA, etc
    @constraint:String {maxLength: 35}
    string payOutRCType?;
    # Contains the rule on which the system should utilise the funds available in the pay out account during the settlement process
    @constraint:String {maxLength: 35}
    string payOutRule?;
    # Id of the product property
    SavingsAccountBodyProperty1[] property?;
    # Condition that is used to build a product
    SavingsAccountBodyPropertyClass[] propertyClass?;
    # Flag to indicate whether Payout Settlement instruction is required or not.Valid input is Yes or No.Default value is Yes
    @constraint:String {maxLength: 3}
    string payOutSettlement?;
};

# Represents the Queries record for the operation: updateAccountSimulation
public type UpdateAccountSimulationQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type AccountDetailsResponseBodyInner_sharedLimitAccounts record {
    # Denotes the accounts in which the credit card Limit is assigned to the customer across all the credit cards
    string sharedLimitAccount?;
    # Indicates the type of shared limit account
    string sharedLimitAccountType?;
};

# Represents the Headers record for the operation: createAccountSimulation
public type CreateAccountSimulationHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Headers record for the operation: createAccountWithdrawalNotice
public type CreateAccountWithdrawalNoticeHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountsResponseBody record {
    PayoffSavingsAccountsResponse1BodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

public type AccountDetailsResponseBodyInner_sharedInterestAccounts record {
    # Contains the account details which shares the interest among the eligible or joint customers.
    string sharedInterestAccount?;
    # Indicates the type of shared interest account
    string sharedInterestAccountType?;
};

# CorporateAccountResponse
public type CorporateAccountResponse record {
    ArrangementHeader header?;
    CorporateAccountResponseBody body?;
};

public type AccountWithdrawalNoticeResponseBodyPropertiesNoticeWithdrawal record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    AccountWithdrawalNoticeBodyNoticeWithdrawal body?;
};

public type SavingsAccountResponseBodyActivities record {
    @jsondata:Name {value: "{activityName}"}
    SavingsAccountResponseBodyActivitiesactivityName activityName?;
};

# Represents the Queries record for the operation: updateAccountWithdrawalNotice
public type UpdateAccountWithdrawalNoticeQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type SavingsAccountBodyInterest record {
    # Defines whether there are single or multiple margins to be considered while arriving at the applicable interest rate  Allowed values:  null (default): multiple margins may be defined SINGLE: only a single margin is allowed
    SavingsAccountBodyMargins[] margins?;
    # Applicable tier percentage (between 0 and 100) for interest calculations based on amount bands
    @constraint:String {maxLength: 3}
    string tierPercent?;
    # Indicates the actual interest rate applied for the account after adjustment/tier calculation/based on basic or Periodic index value
    @constraint:String {maxLength: 19}
    string effectiveRate?;
    # A negative interest rate can be applied at each tier, select Yes, No, Block margin
    @constraint:String {maxLength: 12}
    string tierNegativeRate?;
    # Contains the day basis on which the interest is calculated. Eg: 366/366, 360/365 (Interest days/days in the year)
    @constraint:String {maxLength: 3}
    string dayBasis?;
    # The monetary amount for the tier
    @constraint:String {maxLength: 19}
    string tierAmount?;
};

public type SavingsAccountBodyProperty1 record {
    # Contains the different payout options, for example management charge, principal interest or commitment on which the payout settlement instructions would be processed
    @constraint:String {maxLength: 35}
    string payOutProperty?;
};

public type SavingsAccountResponseBodyPropertiesStatement record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    SavingsAccountBodyStatement2 body?;
};

public type CorporateAccountResponseBodyPropertiesBalance record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    CorporateAccountBodyBalance body?;
};

public type PayoffSavingsAccounts1BodyPayoutproperties record {
    # Contains the different payout options, for example management charge, principal interest or commitment on which the payout settlement instructions would be processed
    @constraint:String {maxLength: 35}
    string payoutproperty?;
};

public type SavingsAccountBodySchedule record {
    # Indicates the amortisation term. When specified, the repayment amount is calculated based on the amortisation term insteam of the account term. When the amortisation term is less than account term, there will be a residual amount to be paid at the maturity
    @constraint:String {maxLength: 4}
    string amortisationTerm?;
    # Indicates the extensions
    record {} extensions?;
    # Contains the user defined rule definition which is evaluated during the transaction based on the defined period
    SavingsAccountBodyPeriodicAttributes[] periodicAttributes?;
    # The amount to be paid at the maturity date
    @constraint:String {maxLength: 18}
    string residualAmount?;
    # Indicates whether the cycling of dates should follow the base day calculation or not. Allowed values are BASE, PREVIOUS, NULL. BASE - Base day calculation will be applied. PREVIOUS/NULL - Base day calculation will not be applied
    @constraint:String {maxLength: 20}
    string baseDayKey?;
    # Indicates if bills of same due date and same pament method(DUE or CAPITALISE) should be combined
    @constraint:String {maxLength: 3}
    string combineBills?;
    # Indicates the type of holiday restriction which will be applied. Allowed values are PropertyClass, Property, Bill Type, Payment Type
    SavingsAccountBodyHolidayRestrictTypes[] holidayRestrictTypes?;
    # Flag to indicate if future disbursements scheduled need to be considered when deriving the constant payment amounts. If set to YES then system will arrive at a constant amount from start date until maturity date of the contract considering any disbursements and payments scheduled for future dates and interest on the outstanding principal amount and then arrives at a calculated amount. If set to NULL, the calculated amount will not consider these future disbursements and payments scheduled in its calculation
    @constraint:String {maxLength: 11}
    string includeFutureDisbursement?;
    # Indicates the initiation of payment for an account
    SavingsAccountBodyPayment[] payment?;
    # This defines the payment schedule amount recalculation frequency
    @constraint:String {maxLength: 38}
    string recalcFrequency?;
    # Indicates the minimum payment related values such as minimum payment property, minum payment amount and minimum payment bill type
    SavingsAccountBodyMinimumPayments[] minimumPayments?;
};

# CurrentAccountsResponse1
public type CurrentAccountsResponse1 record {
    ArrangementHeader header?;
    CurrentAccountsResponse1Body body?;
};

public type AccountInfoResponseBodyInner_customers record {
    # Identifier of the customer
    @constraint:String {maxLength: 35}
    string customerId?;
    # Indicates role of a customer for an arrangement.
    @constraint:String {maxLength: 30}
    string customerRole?;
};

# Represents the Headers record for the operation: createCorporateAccount
public type CreateCorporateAccountHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type SavingsAccountBodyStatement2 record {
    # Indicates whether the tax advice needs to be sent or not
    @constraint:String {maxLength: 2}
    string taxAdvice?;
    # Denotes the time in which the message will be sent automatically
    SavingsAccountBodyMessageTime[] messageTime?;
    # It indicates the request for a special statement any day for cycle 1 without affecting the regular statements of the cycle
    @constraint:String {maxLength: 11}
    string specialStatementFrequency?;
    # Specifies whether or not an advice should be produced when interest and charges are applied
    @constraint:String {maxLength: 2}
    string interestClosingAdvice?;
    # It defines the hooks to be executed for converting the interest rate
    @constraint:String {maxLength: 35}
    string rateInfoRoutine?;
    # Indicates the category of the interest statement. For example, Monthly, Quarterly or Yearly
    SavingsAccountBodyInterestStatement[] interestStatement?;
    # Specifies the record ID of parent message. 
    SavingsAccountBodyMessage[] message?;
    # Contains the details account statement second cycle. It includes addon, participant account, lead account, print type, print attribute name, print attribute value, etc
    SavingsAccountBodyStatement2[] statement2?;
    # Specifies whether or not statements should include any customer details entered at the time of contract creation
    @constraint:String {maxLength: 2}
    string descriptiveStatement?;
    SavingsAccountBodyPrintAttributes[] printAttributes?;
    # Specifies the component whose information will have to be printed in Account Statement
    SavingsAccountBodyStatementInformation[] statementInformation?;
    # Indicates the extensions
    record {} extensions?;
    # It indicates the floor limit value for the debit transaction on the Interim Transaction Report, and is used to exclude smaller entries from the message details. On this message when only one value is used, the floor limit applies to both debit and credit amounts. If left blank then a value of zero is used which means all entries are detailed
    @constraint:String {maxLength: 19}
    string debitFloorLimit?;
    # It indicates the floor limit value for the credit transaction on the interim transaction report, and is used to exclude smaller entries from the message details
    @constraint:String {maxLength: 19}
    string creditFloorLimit?;
    # Contains the details of account statement first cycle. It includes addon, participant account, lead account, print type, print attribute name, print attribute value, etc
    SavingsAccountBodyStatement[] statement?;
    # Specifies whether or not Cycle1 Statements should be printed if there have been no movements over the Account since the last statement. Possible values are YES, NO , IF.0.BALANCE
    @constraint:String {maxLength: 15}
    string ifNoMovement?;
    # Specifies whether or not a detailed interest statement (scale) should be produced whenever interest is applied
    @constraint:String {maxLength: 2}
    string interestScale?;
    # Contains the date on which the transaction or payment gets initiated
    @constraint:String {maxLength: 11}
    string startDate?;
    SavingsAccountBodySwift[] swift?;
};

public type SavingsAccountBodyStatement1 record {
    # Id of the product property
    @constraint:String {maxLength: 30}
    string property?;
    # Specifies frequency for producing the interest statement
    @constraint:String {maxLength: 30}
    string intStmtFreq11?;
};

public type AccountLimitResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesLimit 'limit?;
};

public type AccountPayoffAutoSimulationBodyPayin record {
    # Specifies the account from which the settlement is transferred for the asset finance contract
    @constraint:String {maxLength: 90}
    string repaymentAccountId?;
    # Indicates the the participant beneficiary account details for cash outflow. Account indicated in the beneficiary will be used to credit participant shares upon borrower repayment. Allowed value should be a valid beneficiary in the system
    @constraint:String {maxLength: 35}
    string beneficiaryId?;
};

# AccountSettlementResponse
public type AccountSettlementResponse record {
    ArrangementHeader header?;
    AccountSettlementResponseBody body?;
};

public type AccountDetailsResponseBody AccountDetailsResponseBodyInner[];

public type SavingsAccountBodyPartyRoles record {
    # Contains the identifier used for the role played by the party or customer in the contract or account
    @constraint:String {maxLength: 30}
    string partyRole?;
};

public type PayoffSavingsAccountsResponse1BodyArrangementActivity record {
    # Indicates an unique identifier of an account
    @constraint:String {maxLength: 20}
    string arrangementId?;
    # Id of the activity, e.g. ACCOUNTS-CAPITALISE-ACCHARGE*CARDISSUEFEE
    @constraint:String {maxLength: 80}
    string activityId?;
    # System ID of the originating transaction
    @constraint:String {maxLength: 6}
    string systemId?;
    # Indicates the extensions
    record {} extensions?;
    # Contains the transaction amount. This is based on the currency, either local or foreign currency
    @constraint:Number {minValue: 0, maxValue: 19}
    decimal transactionAmount?;
    # Indicates the unique identifier of the transaction or contract which initiated the activity
    @constraint:String {maxLength: 100}
    string contractId?;
    # Identifier of the currency. This is the 3-letter ISO 4217 code of the currency
    @constraint:String {maxLength: 3}
    string currencyId?;
    # Determines the status of events sent to external system from the current system for the given activity
    @constraint:String {maxLength: 35}
    string externalEventStatus?;
    # Contains the identifier for the transaction date. Dates are expected in ‘YYYYMMDD’ format
    string effectiveDate?;
};

# AccountResponse
public type AccountResponse record {
    ArrangementHeader header?;
    AccountResponseBody body?;
};

public type AccountDetailsResponseBodyInner_jointCustomers record {
    # Indicates the name of the customer. Originator is the party who requests the payment cancellation.
    string customerName?;
    # Identifier of the customer
    string customerId?;
    # Role of joint customer with the main customer
    string jointRelationRoleId?;
    # Description of the joint customer role.
    string jointRoleDisplayName?;
};

public type AccountLobResponseBody record {
    AccountLobResponseBodyArrangementActivity arrangementActivity?;
    SavingsAccountResponseBodyActivities activities?;
    record {} properties?;
};

# Represents the Headers record for the operation: updateAccountWithdrawalNotice
public type UpdateAccountWithdrawalNoticeHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountfacilitiesBodyServices record {
    # Unique id of the service
    @constraint:String {maxLength: 15}
    string 'service?;
    # It will indicate whether the corresponding service is available for arrangement account
    @constraint:String {maxLength: 10}
    string serviceAvailability?;
    # It will indicate whether user has opted the service or not
    @constraint:String {maxLength: 7}
    string customerOption?;
};

public type SavingsAccountBodyStatementInformation record {
    # Id of the product property
    @constraint:String {maxLength: 30}
    string property?;
};

public type AccountArrangementDetailsResponseBodyInner record {
    # Indicates an unique identifier of an account
    string arrangementId?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    string accountId?;
    # Indicates the date on which the arrangement was created
    string arrangementStartDate?;
    # Status of the arrangement. E.g. AUTH, CLOSE, UNAUTH etc
    @constraint:String {maxLength: 15}
    string arrangementStatus?;
    # Indicates the original contract date of the arrangement which was migrated from the legacy system
    @constraint:String {maxLength: 11}
    string originalContractDate?;
    # Indicates the extension data
    record {} extensions?;
    # Identifier of the customer
    @constraint:String {maxLength: 17}
    string customerId?;
    # Indicates the customer who is the legal owner of the arrangement and is the responsible customer of the contract with bank
    @constraint:String {maxLength: 35}
    string beneficialOwner?;
    # Indicates the description of the Product
    string productDescription?;
};

# AccountDormancyReactivationResponse
public type AccountDormancyReactivationResponse record {
    ArrangementHeader header?;
    AccountDormancyReactivationResponseBody body?;
};

public type PayoffSavingsAccountsResponseBodyPropertiesSettlement record {
    SavingsAccountResponseBodyPropertiesLimitHeader header?;
    PayoffSavingsAccountsBodySettlement body?;
};

# Represents the Queries record for the operation: getAccountDormancyDetails
public type GetAccountDormancyDetailsQueries record {
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

public type SavingsAccountBodyAgentRoles record {
    # The role of the 3rd party, select from standard list
    @constraint:String {maxLength: 30}
    string agentRole?;
};

# AccountDebitResponse
public type AccountDebitResponse record {
    ArrangementHeader header?;
    AccountDebitResponseBody body?;
};

# AccountBalanceMigrationResponse
public type AccountBalanceMigrationResponse record {
    ArrangementHeader header?;
    AccountBalanceMigrationResponseBody body?;
};

# BusinessAccountResponse
public type BusinessAccountResponse record {
    ArrangementHeader header?;
    BusinessAccountResponseBody body?;
};

public type AccountPayoffAutoSimulationBodyAmount record {
    # Indicates the monetary amount that is fixed during the associated account's effective period
    @constraint:String {maxLength: 19}
    string fixedAmount?;
};

# Represents the Queries record for the operation: updateAccountLimit
public type UpdateAccountLimitQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type AccountBodyBalance record {
    # Indicates the extensions
    record {} extensions?;
    # Title line 2 that will appear in notice and statements
    SavingsAccountBodyAccountTitles2[] accountTitles2?;
    # Identifies any restrictions for posting entries that are to be imposed on the Account
    AccountSimulationBodyPostingRestrictions[] postingRestrictions?;
    # Short title on an account
    SavingsAccountBodyAccountTitles[] accountTitles?;
    # Contains the short title given to the name of an account or an arrangement
    AccountSimulationBodyShortTitles[] shortTitles?;
};

# Represents the Headers record for the operation: createBusinessAccount
public type CreateBusinessAccountHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Name of the (digital) channel registered by the Customer
    string channelName?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountStatementResponse1BodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance schedule?;
    SavingsAccountResponseBodyPropertiesInheritance inhSchedule?;
    SavingsAccountResponseBodyPropertiesStatement statement?;
};

public type SavingsAccountResponseBodyProperties record {
    SavingsAccountResponseBodyPropertiesInheritance noticefee?;
    SavingsAccountResponseBodyPropertiesInheritance periodiccharges?;
    SavingsAccountResponseBodyPropertiesInheritance bonus?;
    SavingsAccountResponseBodyPropertiesCrinterest crinterest?;
    SavingsAccountResponseBodyPropertiesInheritance xisa?;
    SavingsAccountResponseBodyPropertiesInheritance arrangementRules?;
    SavingsAccountResponseBodyPropertiesInheritance inheritance?;
    SavingsAccountResponseBodyPropertiesInheritance xisPoolid?;
    SavingsAccountResponseBodyPropertiesInheritance payfees?;
    SavingsAccountResponseBodyPropertiesSettlement settlement?;
    SavingsAccountResponseBodyPropertiesBalance balance?;
    SavingsAccountResponseBodyPropertiesInheritance activityCharges?;
    SavingsAccountResponseBodyPropertiesInheritance nsfreversalfees?;
    SavingsAccountResponseBodyPropertiesInheritance accreporting?;
    SavingsAccountResponseBodyPropertiesInheritance dormancy?;
    SavingsAccountResponseBodyPropertiesLimit 'limit?;
    SavingsAccountResponseBodyPropertiesInheritance xira?;
    SavingsAccountResponseBodyPropertiesStatement statement?;
    SavingsAccountResponseBodyPropertiesInheritance rewardsPoints?;
    SavingsAccountResponseBodyPropertiesInheritance dormancyfee?;
    SavingsAccountResponseBodyPropertiesInheritance agentCommission?;
    SavingsAccountResponseBodyPropertiesInheritance closurefee?;
    SavingsAccountResponseBodyPropertiesInheritance minbalfee?;
    SavingsAccountResponseBodyPropertiesInheritance txnfee?;
    SavingsAccountResponseBodyPropertiesInheritance balanceAvailability?;
    SavingsAccountResponseBodyPropertiesInheritance officers?;
    SavingsAccountResponseBodyPropertiesInheritance returnfees?;
    SavingsAccountResponseBodyPropertiesInheritance forcecapitalise?;
    SavingsAccountResponseBodyPropertiesInheritance xrateSetup?;
    SavingsAccountResponseBodyPropertiesInheritance renewal?;
    SavingsAccountResponseBodyPropertiesInheritance mgmtfee?;
    SavingsAccountResponseBodyPropertiesInheritance productQualifierNotice?;
    SavingsAccountResponseBodyPropertiesInheritance limitfees?;
    SavingsAccountResponseBodyPropertiesInheritance payoff?;
    SavingsAccountResponseBodyPropertiesInheritance tax?;
    SavingsAccountResponseBodyPropertiesInheritance messaging?;
    SavingsAccountResponseBodyPropertiesInheritance cashback?;
    SavingsAccountResponseBodyPropertiesInheritance alerts?;
    SavingsAccountResponseBodyPropertiesSchedule schedule?;
    SavingsAccountResponseBodyPropertiesInheritance prefpricing?;
    SavingsAccountResponseBodyPropertiesInheritance cardissuefee?;
    SavingsAccountResponseBodyPropertiesInheritance poNotice?;
    SavingsAccountResponseBodyPropertiesInheritance xtxlimit?;
    SavingsAccountResponseBodyPropertiesInheritance constraint?;
    SavingsAccountResponseBodyPropertiesInheritance facility?;
    SavingsAccountResponseBodyPropertiesCustomer customer?;
};

public type SavingsAccountBodyPartyIds record {
    # Allows capturing of customers or person entities to be part of the relationship. If partyType is selected as Customer, then the system will allow only customer Ids to be captured into this field. If partyType is selected as Person or Entity, then system will allow only personEntity Ids to be captured into this field
    @constraint:String {maxLength: 10}
    string partyId?;
};

public type AccountStatementResponseBodyInner record {
    # The additional text printed on descriptive statements in addition to the standard narrative and/or reference
    AccountStatementResponseBodyInner_narratives[] narratives?;
    # Indicates the extension data
    record {} extensions?;
    # Contains the identifier for the transaction in the core system
    @constraint:String {maxLength: 25}
    string transactionReference?;
    # Closing balance of the arrangement
    @constraint:String {maxLength: 19}
    string closingBalance?;
    # Indicates the date on which this business activity is booked in the underlying system. The effective date and booking date could be different if systems allow forward/back dated business transactions. Dates are expected in YYYYMMDD format. If booking date is not passed, effective date would be assumed as booking date
    @constraint:String {maxLength: 11}
    string bookingDate?;
    # Identifies the system internal transaction code applicable to the transaction
    @constraint:String {maxLength: 150}
    string transactionCode?;
    # Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)
    @constraint:String {maxLength: 11}
    string valueDate?;
    # Amount to be debited in a payment transaction
    @constraint:String {maxLength: 19}
    string debitAmount?;
    # Amount to be credited in a payment transaction
    @constraint:String {maxLength: 19}
    string creditAmount?;
};

public type AccountBalanceMigrationBodyProperties record {
    # Indicates the outstanding bill amount of a given property for a payment type
    @constraint:String {maxLength: 18}
    string outstandingPropertyAmount?;
    # Indicates the outstanding bill amount of a given property for a payment type
    @constraint:String {maxLength: 19}
    string outstandingAmortAmount?;
    # Indicates the interest or account or charge property for which write off activity can be performed
    @constraint:String {maxLength: 15}
    string writeOffProperty?;
    # Indicates the original amount of a given property for a payment type
    @constraint:String {maxLength: 18}
    string originalPropertyAmount?;
    # Id of the product property
    @constraint:String {maxLength: 35}
    string property?;
    # Indicates the new charge amount which is specified during adjustment of the amortisation charge. The specified value will be the new amount outstanding and yet to be amortised
    @constraint:String {maxLength: 19}
    string newAmortizationAmount?;
    # Indicates the bill adjustment amount for the given property. This can be signed. Sign used to indicate the increment or decrement of the bill interest or account or charge property amount
    @constraint:String {maxLength: 19}
    string adjustPropertyAmount?;
    # Indicates the amortisation end date for an amortisation type of charge
    @constraint:String {maxLength: 11}
    string amortEndDate?;
    # Indicates the adjustment amount for the charge during adjustment. The new charge amount will be calculated from the unamortised amount and the adjustment amount. Either a value in this field or the new amort amount will be allowed during adjustment. The value should be given in arrangement currency
    @constraint:String {maxLength: 19}
    string adjustAmortAmount?;
    # Indicates the oustanding amount of interest or account or charge property after bill adjustment. For write off activities, system will default zero amount in this field
    @constraint:String {maxLength: 19}
    string newPropertyAmount?;
};
