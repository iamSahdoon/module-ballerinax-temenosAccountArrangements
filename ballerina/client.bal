// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# The Arrangement Architecture is a Temenos Transact Framework to create and manage  various products such as loans, deposits, accounts, etc. It provides a modular business component-based architecture, whereby users can create their products by using the components provided by Temenos and these components can be reused across multiple different products.This API can be used to create and manage various types of accounts such as current, savings, corporate, islamic, non-resident and minor accounts created using the Arrangement Architecture.
public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig apiKeyConfig;
    # Gets invoked to initialize the `connector`.
    #
    # + apiKeyConfig - API keys for authorization 
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ApiKeysConfig apiKeyConfig, ConnectionConfig config =  {}, string serviceUrl = "https://api.temenos.com/api/v9.2.0//holdings") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
        self.apiKeyConfig = apiKeyConfig.cloneReadOnly();
    }

    # Allows creation of accounts
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createSavingsAccountResponse 
    resource isolated function post accounts(http:Request request, CreateSavingsAccountHeaders headers = {}, *CreateSavingsAccountQueries queries) returns SavingsAccountResponse|error {
        string resourcePath = string `/accounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a current account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createCurrentAccountsResponse 
    resource isolated function post accounts/currentAccounts(http:Request request, CreateCurrentAccountsHeaders headers = {}, *CreateCurrentAccountsQueries queries) returns CurrentAccountsResponse|error {
        string resourcePath = string `/accounts/currentAccounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a corporate current account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createCorporateAccountResponse 
    resource isolated function post accounts/corporateAccounts(http:Request request, CreateCorporateAccountHeaders headers = {}, *CreateCorporateAccountQueries queries) returns CorporateAccountResponse|error {
        string resourcePath = string `/accounts/corporateAccounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a mudaraba savings account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createMudarabaSavingAccountResponse 
    resource isolated function post accounts/mudarabaSavingAccounts(http:Request request, CreateMudarabaSavingAccountHeaders headers = {}, *CreateMudarabaSavingAccountQueries queries) returns MudarabaSavingAccountResponse|error {
        string resourcePath = string `/accounts/mudarabaSavingAccounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a savings account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createSavingAccountResponse 
    resource isolated function post accounts/savingsAccounts(http:Request request, CreateSavingAccountHeaders headers = {}, *CreateSavingAccountQueries queries) returns SavingAccountResponse|error {
        string resourcePath = string `/accounts/savingsAccounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a minor savings account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createMinorAccountResponse 
    resource isolated function post accounts/minorAccounts(http:Request request, CreateMinorAccountHeaders headers = {}, *CreateMinorAccountQueries queries) returns SavingAccountResponse|error {
        string resourcePath = string `/accounts/minorAccounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Creates a non resident savings account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createNonResidentAccountResponse 
    resource isolated function post accounts/nonResidentAccounts(http:Request request, CreateNonResidentAccountHeaders headers = {}, *CreateNonResidentAccountQueries queries) returns SavingAccountResponse|error {
        string resourcePath = string `/accounts/nonResidentAccounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Reverse or delete a current account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - reverseAccountsResponse 
    # 
    # # Deprecated
    @deprecated
    resource isolated function delete accounts/[string activityId]/reverseAccounts(ReverseAccountsHeaders headers = {}, *ReverseAccountsQueries queries) returns CorporateAccountResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(activityId)}/reverseAccounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Retrieves the details of an account
    #
    # + arrangementId - Indicates an unique identifier of an account
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - AccountArrangementDetailsResponse 
    # 
    # # Deprecated
    @deprecated
    resource isolated function get accounts/[string arrangementId]/accountDetails(GetAccountArrangementDetailsHeaders headers = {}, *GetAccountArrangementDetailsQueries queries) returns AccountArrangementDetailsResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(arrangementId)}/accountDetails`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves the previously generated statement details for the given account
    #
    # + accountId - Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - PastStatementsResponse 
    resource isolated function get accounts/[string accountId]/statements/dates(GetPastStatementsHeaders headers = {}, *GetPastStatementsQueries queries) returns PastStatementsResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/statements/dates`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves the details of future transaction entries
    #
    # + accountId - Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - ForwardEntriesResponse 
    resource isolated function get accounts/[string accountId]/statements/forwardEntries(GetForwardEntriesHeaders headers = {}, *GetForwardEntriesQueries queries) returns ForwardEntriesResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/statements/forwardEntries`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves the statement details for the given account
    #
    # + accountId - Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - AccountStatementResponse 
    resource isolated function get accounts/[string accountId]/statements(GetAccountStatementHeaders headers = {}, *GetAccountStatementQueries queries) returns AccountStatementResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/statements`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Update the statement frequency of an account
    #
    # + accountId - Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountStatementResponse 
    resource isolated function put accounts/[string accountId]/statements(http:Request request, UpdateAccountStatementHeaders headers = {}, *UpdateAccountStatementQueries queries) returns AccountStatementResponse1|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/statements`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Calculate the outstanding amount to close the savings account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - calculatePayoffSavingsAccountsResponse 
    resource isolated function put accounts/savingsAccounts/[string savingsAccountId]/payoffCalculations(http:Request request, CalculatePayoffSavingsAccountsHeaders headers = {}, *CalculatePayoffSavingsAccountsQueries queries) returns PayoffSavingsAccountsResponse|error {
        string resourcePath = string `/accounts/savingsAccounts/${getEncodedUri(savingsAccountId)}/payoffCalculations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform the settlement of payoff amount for the savings account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updatePayoffSavingsAccountsResponse 
    resource isolated function put accounts/savingsAccounts/[string savingsAccountId]/payoffs(http:Request request, UpdatePayoffSavingsAccountsHeaders headers = {}, *UpdatePayoffSavingsAccountsQueries queries) returns PayoffSavingsAccountsResponse1|error {
        string resourcePath = string `/accounts/savingsAccounts/${getEncodedUri(savingsAccountId)}/payoffs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Calculate the outstanding amount to close the current account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - calculatePayoffCurrentAccountsResponse 
    resource isolated function put accounts/currentAccounts/[string currentAccountId]/payoffCalculations(http:Request request, CalculatePayoffCurrentAccountsHeaders headers = {}, *CalculatePayoffCurrentAccountsQueries queries) returns PayoffCurrentAccountsResponse|error {
        string resourcePath = string `/accounts/currentAccounts/${getEncodedUri(currentAccountId)}/payoffCalculations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform the settlement of payoff amount for the current account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updatePayoffCurrentAccountsResponse 
    resource isolated function put accounts/currentAccounts/[string currentAccountId]/payoffs(http:Request request, UpdatePayoffCurrentAccountsHeaders headers = {}, *UpdatePayoffCurrentAccountsQueries queries) returns PayoffCurrentAccountsResponse1|error {
        string resourcePath = string `/accounts/currentAccounts/${getEncodedUri(currentAccountId)}/payoffs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform the closure of the current account after settlement of payoff amount
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - deleteCurrentAccountsResponse 
    resource isolated function put accounts/currentAccounts/[string currentAccountId]/accountClosures(http:Request request, DeleteCurrentAccountsHeaders headers = {}, *DeleteCurrentAccountsQueries queries) returns CurrentAccountsResponse1|error {
        string resourcePath = string `/accounts/currentAccounts/${getEncodedUri(currentAccountId)}/accountClosures`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform the closure of the savings account after settlement of payoff amount
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - deleteSavingsAccountsResponse 
    resource isolated function put accounts/savingsAccounts/[string savingsAccountId]/accountClosures(http:Request request, DeleteSavingsAccountsHeaders headers = {}, *DeleteSavingsAccountsQueries queries) returns SavingsAccountsResponse|error {
        string resourcePath = string `/accounts/savingsAccounts/${getEncodedUri(savingsAccountId)}/accountClosures`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Create simulation for account products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createAccountSimulationResponse 
    resource isolated function post accounts/simulations(http:Request request, CreateAccountSimulationHeaders headers = {}, *CreateAccountSimulationQueries queries) returns AccountSimulationResponse|error {
        string resourcePath = string `/accounts/simulations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Amend simulation for account products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountSimulationResponse 
    resource isolated function put accounts/simulations/[string simulationId](http:Request request, UpdateAccountSimulationHeaders headers = {}, *UpdateAccountSimulationQueries queries) returns AccountSimulationResponse1|error {
        string resourcePath = string `/accounts/simulations/${getEncodedUri(simulationId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update an accounts arrangement
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createAccountsArrangementsResponse 
    resource isolated function put accounts/arrangements/[string arrangementId]/activities(http:Request request, CreateAccountsArrangementsHeaders headers = {}, *CreateAccountsArrangementsQueries queries) returns AccountsArrangementsResponse|error {
        string resourcePath = string `/accounts/arrangements/${getEncodedUri(arrangementId)}/activities`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update the debit interest conditions of an account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountInterestConditionResponse 
    resource isolated function put accounts/[string accountId]/interests(http:Request request, UpdateAccountInterestConditionHeaders headers = {}, *UpdateAccountInterestConditionQueries queries) returns AccountInterestConditionResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/interests`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Retrieves the service availability for an account
    #
    # + accountId - Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - AccountfacilitiesResponse 
    resource isolated function get accounts/[string accountId]/facilities(GetAccountfacilitiesHeaders headers = {}, *GetAccountfacilitiesQueries queries) returns AccountfacilitiesResponse1|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/facilities`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Update the service availability for an account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountfacilitiesResponse 
    resource isolated function put accounts/[string accountId]/facilities(http:Request request, UpdateAccountfacilitiesHeaders headers = {}, *UpdateAccountfacilitiesQueries queries) returns AccountfacilitiesResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/facilities`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Creates a business banking account for a single or joint customer
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createBusinessAccountResponse 
    resource isolated function post accounts/businessAccounts(http:Request request, CreateBusinessAccountHeaders headers = {}, *CreateBusinessAccountQueries queries) returns BusinessAccountResponse|error {
        string resourcePath = string `/accounts/businessAccounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Retrieves account details
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - AccountDetailsResponse 
    resource isolated function get accounts/[string accountId](GetAccountDetailsHeaders headers = {}, *GetAccountDetailsQueries queries) returns AccountDetailsResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Change of contract from one account product to another
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountProductResponse 
    resource isolated function put accounts/[string accountId]/products(http:Request request, UpdateAccountProductHeaders headers = {}, *UpdateAccountProductQueries queries) returns AccountProductResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/products`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update the limit conditions of the account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountLimitResponse 
    resource isolated function put accounts/[string accountId]/limits(http:Request request, UpdateAccountLimitHeaders headers = {}, *UpdateAccountLimitQueries queries) returns AccountLimitResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/limits`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update the interest conditions of the account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountInterestConditionsResponse 
    resource isolated function put accounts/[string accountId]/interestConditions(http:Request request, UpdateAccountInterestConditionsHeaders headers = {}, *UpdateAccountInterestConditionsQueries queries) returns AccountInterestConditionsResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/interestConditions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Deactivates the savings account to given status
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountDormancyStatusResponse 
    resource isolated function put accounts/[string accountId]/dormancyStatus/[string status](http:Request request, UpdateAccountDormancyStatusHeaders headers = {}, *UpdateAccountDormancyStatusQueries queries) returns AccountDormancyStatusResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/dormancyStatus/${getEncodedUri(status)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Change of channel for the account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountChannelResponse 
    resource isolated function put accounts/[string accountId]/channels(http:Request request, UpdateAccountChannelHeaders headers = {}, *UpdateAccountChannelQueries queries) returns AccountChannelResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/channels`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Migration of legacy system account contract to the given account product
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - initiateAccountMigrationResponse 
    resource isolated function post accounts/migrations(http:Request request, InitiateAccountMigrationHeaders headers = {}, *InitiateAccountMigrationQueries queries) returns AccountMigrationResponse|error {
        string resourcePath = string `/accounts/migrations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Captures outstanding balance details of a contract migrated from legacy system
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountBalanceMigrationResponse 
    resource isolated function put accounts/[string accountId]/migrations/balances(http:Request request, UpdateAccountBalanceMigrationHeaders headers = {}, *UpdateAccountBalanceMigrationQueries queries) returns AccountBalanceMigrationResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/migrations/balances`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Renegotiation of the account contract details
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountConditionsResponse 
    resource isolated function put accounts/[string accountId]/renegotiations(http:Request request, UpdateAccountConditionsHeaders headers = {}, *UpdateAccountConditionsQueries queries) returns AccountConditionsResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/renegotiations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Reset the account dormancy status
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountDormancyReactivationResponse 
    resource isolated function put accounts/[string accountId]/dormancyStatus/reactivations(http:Request request, UpdateAccountDormancyReactivationHeaders headers = {}, *UpdateAccountDormancyReactivationQueries queries) returns AccountDormancyReactivationResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/dormancyStatus/reactivations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Notifies the withdrawal amount from account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createAccountWithdrawalNoticeResponse 
    resource isolated function put accounts/[string accountId]/withdrawalNotices(http:Request request, CreateAccountWithdrawalNoticeHeaders headers = {}, *CreateAccountWithdrawalNoticeQueries queries) returns AccountWithdrawalNoticeResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/withdrawalNotices`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update customers for the given account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountCustomerResponse 
    resource isolated function put accounts/[string accountId]/customers(http:Request request, UpdateAccountCustomerHeaders headers = {}, *UpdateAccountCustomerQueries queries) returns AccountCustomerResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/customers`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform credit transaction in an account.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountCreditResponse 
    resource isolated function put accounts/[string accountId]/credits(http:Request request, UpdateAccountCreditHeaders headers = {}, *UpdateAccountCreditQueries queries) returns AccountCreditResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/credits`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform debit transactions in an account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountDebitResponse 
    resource isolated function put accounts/[string accountId]/debits(http:Request request, UpdateAccountDebitHeaders headers = {}, *UpdateAccountDebitQueries queries) returns AccountDebitResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/debits`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Performs backdated adjustment and re-accrual for the given savings account 
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountAdjustmentResponse 
    resource isolated function put accounts/[string accountId]/adjustments(http:Request request, UpdateAccountAdjustmentHeaders headers = {}, *UpdateAccountAdjustmentQueries queries) returns AccountAdjustmentResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/adjustments`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Change of line of business for the account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountLobResponse 
    resource isolated function put accounts/[string accountId]/lineofBusiness(http:Request request, UpdateAccountLobHeaders headers = {}, *UpdateAccountLobQueries queries) returns AccountLobResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/lineofBusiness`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Retrieves the account dormancy conditions
    #
    # + accountId - Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - AccountDormancyDetailsResponse 
    resource isolated function get accounts/[string accountId]/dormancyConditions(GetAccountDormancyDetailsHeaders headers = {}, *GetAccountDormancyDetailsQueries queries) returns AccountDormancyDetailsResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/dormancyConditions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Captures the bill information of the account such as bill id, property names, bill amount etc. This is used to migrate the bills of a legacy contract which is migrated from other system & update the bill details
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountBillMigrationResponse 
    resource isolated function put accounts/[string accountId]/migrations/bills(http:Request request, UpdateAccountBillMigrationHeaders headers = {}, *UpdateAccountBillMigrationQueries queries) returns AccountBillMigrationResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/migrations/bills`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Updates the branch of an account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountBranchResponse 
    resource isolated function put accounts/[string accountId]/branches(http:Request request, UpdateAccountBranchHeaders headers = {}, *UpdateAccountBranchQueries queries) returns AccountBranchResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/branches`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update the settlement conditions of the account such as payin account, payin percentage, payin amount, payout account, payout percentage, payout amount, etc
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountSettlementResponse 
    resource isolated function put accounts/[string accountId]/settlements(http:Request request, UpdateAccountSettlementHeaders headers = {}, *UpdateAccountSettlementQueries queries) returns AccountSettlementResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/settlements`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update the account's details
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountResponse 
    resource isolated function put accounts/[string accountId]/accounts(http:Request request, UpdateAccountHeaders headers = {}, *UpdateAccountQueries queries) returns AccountResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/accounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update payment schedule for the given account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountScheduleResponse 
    resource isolated function put accounts/[string accountId]/schedules(http:Request request, UpdateAccountScheduleHeaders headers = {}, *UpdateAccountScheduleQueries queries) returns AccountScheduleResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/schedules`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Cancels the notification of withdrawal of amount from account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - cancelAccountWithdrawalNoticeResponse 
    resource isolated function put accounts/[string accountId]/withdrawalNotices/cancellations(http:Request request, CancelAccountWithdrawalNoticeHeaders headers = {}, *CancelAccountWithdrawalNoticeQueries queries) returns AccountWithdrawalNoticeResponse1|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/withdrawalNotices/cancellations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Updates the notice of withdrawal of amount from account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - updateAccountWithdrawalNoticeResponse 
    resource isolated function put accounts/[string accountId]/withdrawalNotices/noticeUpdates(http:Request request, UpdateAccountWithdrawalNoticeHeaders headers = {}, *UpdateAccountWithdrawalNoticeQueries queries) returns AccountWithdrawalNoticeResponse2|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/withdrawalNotices/noticeUpdates`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform payout of an account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - initiateAccountPayoutResponse 
    resource isolated function put accounts/[string accountId]/payouts(http:Request request, InitiateAccountPayoutHeaders headers = {}, *InitiateAccountPayoutQueries queries) returns AccountPayoutResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/payouts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Perform repayment of the given account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - initiateAccountPayinResponse 
    resource isolated function put accounts/[string accountId]/repayments(http:Request request, InitiateAccountPayinHeaders headers = {}, *InitiateAccountPayinQueries queries) returns AccountPayoutResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/repayments`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Create auto simulation payoff activity for account products
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - createAccountPayoffAutoSimulationResponse 
    resource isolated function post accounts/[string accountId]/autoSimulations/payoffs(http:Request request, CreateAccountPayoffAutoSimulationHeaders headers = {}, *CreateAccountPayoffAutoSimulationQueries queries) returns AccountPayoffAutoSimulationResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/autoSimulations/payoffs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Retrieves list of account basic details
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - AccountInfoResponse 
    resource isolated function get accounts/accountsDetails(GetAccountInfoHeaders headers = {}, *GetAccountInfoQueries queries) returns AccountInfoResponse|error {
        string resourcePath = string `/accounts/accountsDetails`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<anydata> headerValues = {...headers};
        headerValues["apikey"] = self.apiKeyConfig.apikey;
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }
}
